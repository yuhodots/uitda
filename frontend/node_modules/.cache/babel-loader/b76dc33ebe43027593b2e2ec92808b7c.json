{"ast":null,"code":"import _defineProperty from \"/Users/soogeun/Documents/Uitda/uitda-test/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/soogeun/Documents/Uitda/uitda-test/frontend/src/components/Network/NetworkBoard/NetworkBoard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// 상위 컴포넌트: NetworkContainer\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport NetworkPost from \"./NetworkPost\";\n\nclass NetworkBoard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._makeStandardList = postlist => {\n      // Postlist의 Post 개수를 3의 배수에 맞도록\n      // Fakecard를 추가해 주는 함수\n      // 반응형 기능을 아직 구현 안함\n      let standardList = [];\n      const fakeCard = {\n        id: -1,\n        title: '',\n        author: '',\n        created: '',\n        description: '',\n        filenum: 0,\n        isFake: true\n      };\n      const cardNum = postlist.length;\n      const remain = cardNum % 3;\n      let fakeCardNum = remain ? 3 - remain : 0;\n      standardList = postlist.map(post => {\n        return _objectSpread({}, post, {\n          isFake: false\n        });\n      });\n\n      while (fakeCardNum--) {\n        standardList.push(fakeCard);\n      }\n\n      return standardList;\n    };\n\n    this._renderPostList = postlist => {\n      return postlist.map((post, idx) => {\n        return React.createElement(NetworkPost, {\n          id: post.id,\n          title: post.title,\n          author: post.author,\n          created: post.created,\n          description: post.description,\n          filenum: post.filenum,\n          isFake: post.isFake,\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      });\n    };\n  }\n\n  render() {\n    const postlist = this._makeStandardList(this.props.postlist);\n\n    return React.createElement(\"div\", {\n      className: \"BoardTemplate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this._renderPostList(postlist));\n  }\n\n}\n\nNetworkBoard.propTypes = {\n  postlist: PropTypes.array.isRequired // 포스팅들의 데이터 리스트\n\n};\nexport default NetworkBoard;","map":{"version":3,"sources":["/Users/soogeun/Documents/Uitda/uitda-test/frontend/src/components/Network/NetworkBoard/NetworkBoard.js"],"names":["React","Component","PropTypes","NetworkPost","NetworkBoard","_makeStandardList","postlist","standardList","fakeCard","id","title","author","created","description","filenum","isFake","cardNum","length","remain","fakeCardNum","map","post","push","_renderPostList","idx","render","props","propTypes","array","isRequired"],"mappings":";;;;;;;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAEjCI,iBAFiC,GAEZC,QAAD,IAAc;AAC9B;AACA;AACA;AAEA,UAAIC,YAAY,GAAG,EAAnB;AAEA,YAAMC,QAAQ,GAAG;AACbC,QAAAA,EAAE,EAAG,CAAC,CADO;AAEbC,QAAAA,KAAK,EAAG,EAFK;AAGbC,QAAAA,MAAM,EAAG,EAHI;AAIbC,QAAAA,OAAO,EAAG,EAJG;AAKbC,QAAAA,WAAW,EAAG,EALD;AAMbC,QAAAA,OAAO,EAAG,CANG;AAObC,QAAAA,MAAM,EAAE;AAPK,OAAjB;AAUA,YAAMC,OAAO,GAAGV,QAAQ,CAACW,MAAzB;AACA,YAAMC,MAAM,GAAGF,OAAO,GAAG,CAAzB;AACA,UAAIG,WAAW,GAAGD,MAAM,GAAG,IAAIA,MAAP,GAAgB,CAAxC;AAEAX,MAAAA,YAAY,GAAGD,QAAQ,CAACc,GAAT,CAAaC,IAAI,IAAI;AAChC,iCACOA,IADP;AAEIN,UAAAA,MAAM,EAAE;AAFZ;AAIH,OALc,CAAf;;AAOA,aAAMI,WAAW,EAAjB,EAAoB;AAChBZ,QAAAA,YAAY,CAACe,IAAb,CAAkBd,QAAlB;AACH;;AAED,aAAOD,YAAP;AACH,KAnCgC;;AAAA,SAsCjCgB,eAtCiC,GAsCdjB,QAAD,IAAc;AAC5B,aAAOA,QAAQ,CAACc,GAAT,CAAc,CAACC,IAAD,EAAOG,GAAP,KAAe;AAChC,eACI,oBAAC,WAAD;AACI,UAAA,EAAE,EAAIH,IAAI,CAACZ,EADf;AAEI,UAAA,KAAK,EAAIY,IAAI,CAACX,KAFlB;AAGI,UAAA,MAAM,EAAIW,IAAI,CAACV,MAHnB;AAII,UAAA,OAAO,EAAIU,IAAI,CAACT,OAJpB;AAKI,UAAA,WAAW,EAAIS,IAAI,CAACR,WALxB;AAMI,UAAA,OAAO,EAAIQ,IAAI,CAACP,OANpB;AAOI,UAAA,MAAM,EAAIO,IAAI,CAACN,MAPnB;AAQI,UAAA,GAAG,EAAIS,GARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,OAbM,CAAP;AAcH,KArDgC;AAAA;;AAuDjCC,EAAAA,MAAM,GAAG;AACL,UAAMnB,QAAQ,GAAG,KAAKD,iBAAL,CAAuB,KAAKqB,KAAL,CAAWpB,QAAlC,CAAjB;;AACA,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKiB,eAAL,CAAqBjB,QAArB,CADL,CADJ;AAKH;;AA9DgC;;AAiErCF,YAAY,CAACuB,SAAb,GAAyB;AACrBrB,EAAAA,QAAQ,EAAEJ,SAAS,CAAC0B,KAAV,CAAgBC,UADL,CACmB;;AADnB,CAAzB;AAIA,eAAezB,YAAf","sourcesContent":["\n\n// 상위 컴포넌트: NetworkContainer\n\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport NetworkPost from \"./NetworkPost\";\n\nclass NetworkBoard extends Component {\n\n    _makeStandardList = (postlist) => {\n        // Postlist의 Post 개수를 3의 배수에 맞도록\n        // Fakecard를 추가해 주는 함수\n        // 반응형 기능을 아직 구현 안함\n\n        let standardList = [];\n\n        const fakeCard = {\n            id : -1,\n            title : '',\n            author : '',\n            created : '',\n            description : '',\n            filenum : 0,\n            isFake: true\n        };\n\n        const cardNum = postlist.length;\n        const remain = cardNum % 3;\n        let fakeCardNum = remain ? 3 - remain : 0;\n\n        standardList = postlist.map(post => {\n            return {\n                ...post,\n                isFake: false\n            }\n        })\n\n        while(fakeCardNum--){\n            standardList.push(fakeCard)\n        }\n\n        return standardList;\n    }\n\n\n    _renderPostList = (postlist) => {\n        return postlist.map( (post, idx) => {\n            return (\n                <NetworkPost\n                    id = {post.id}\n                    title = {post.title}\n                    author = {post.author}\n                    created = {post.created}\n                    description = {post.description}\n                    filenum = {post.filenum}\n                    isFake = {post.isFake}\n                    key = {idx}\n                />\n            )\n        })\n    }\n\n    render() {\n        const postlist = this._makeStandardList(this.props.postlist)\n        return (\n            <div className=\"BoardTemplate\">\n                {this._renderPostList(postlist)}\n            </div>\n        )\n    }\n}\n\nNetworkBoard.propTypes = {\n    postlist: PropTypes.array.isRequired,   // 포스팅들의 데이터 리스트\n}\n\nexport default NetworkBoard;"]},"metadata":{},"sourceType":"module"}