{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/Uitda/uitda-test/frontend/src/containers/NetworkContainer.js\";\n// Network Board 컴포넌트의 액션이 담긴 컨테이너 컴포넌트\n// 상위 컴포넌트: pages/Network\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux'; // 컴포넌트\n\nimport NetworkBoard from \"../components/Network/NetworkBoard\";\nimport SearchIcon from \"../components/Structure/SearchIcon\"; // 액션\n\nimport { getNetworkRequest } from \"../store/actions/network\";\nimport { headerOn, headerOff, searchBarOn, categoryOn } from \"../store/actions/structure\";\n\nclass NetworkingContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onScroll = e => {\n      this.props.headerOff();\n\n      if (document.documentElement.scrollTop <= 64) {\n        this.props.headerOn();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.headerOn();\n    this.props.searchBarOn();\n    this.props.categoryOn();\n    window.addEventListener('scroll', this.onScroll); // Scroll 이벤트가 생길 때, onScroll을 실행함\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.props.isGetSuccess ? React.createElement(NetworkBoard, {\n      postlist: this.props.postlist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }) : \"loading\", React.createElement(SearchIcon, {\n      isHeaderOn: this.props.isHeaderOn,\n      headerOn: this.props.headerOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    postlist: state.network.postlist,\n    // 포스팅들의 데이터\n    isGetSuccess: state.network.isGetSuccess,\n    // 데이터 get 요청이 성공했는지 여부\n    isHeaderOn: state.structure.isHeaderOn // 헤더의 상태\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getNetworkRequest: () => {\n      dispatch(getNetworkRequest());\n    },\n    // Network Board 데이터를 받아오는 메서드\n    headerOn: () => {\n      dispatch(headerOn());\n    },\n    // 헤더를 나타내는 메서드\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더가 사라지게 하는 메서드\n    searchBarOn: () => {\n      dispatch(searchBarOn());\n    },\n    // 검색 바가 나타나게 하는 메서드\n    categoryOn: () => {\n      dispatch(categoryOn());\n    } // 카테고리가 나타나게 하는 메서드\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkingContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/Uitda/uitda-test/frontend/src/containers/NetworkContainer.js"],"names":["React","Component","connect","NetworkBoard","SearchIcon","getNetworkRequest","headerOn","headerOff","searchBarOn","categoryOn","NetworkingContainer","onScroll","e","props","document","documentElement","scrollTop","componentDidMount","window","addEventListener","render","isGetSuccess","postlist","isHeaderOn","mapStateToProps","state","network","structure","mapDispatchToProps","dispatch"],"mappings":";AAAA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,UAAP,MAAuB,oCAAvB,C,CAEA;;AACA,SACIC,iBADJ,QAEO,0BAFP;AAIA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIIC,UAJJ,QAKO,4BALP;;AAOA,MAAMC,mBAAN,SAAkCT,SAAlC,CAA4C;AAAA;AAAA;;AAAA,SASxCU,QATwC,GAS5BC,CAAD,IAAO;AACd,WAAKC,KAAL,CAAWN,SAAX;;AACA,UAAGO,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,IAAsC,EAAzC,EAA4C;AACxC,aAAKH,KAAL,CAAWP,QAAX;AACH;AACJ,KAduC;AAAA;;AAExCW,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,KAAL,CAAWP,QAAX;AACA,SAAKO,KAAL,CAAWL,WAAX;AACA,SAAKK,KAAL,CAAWJ,UAAX;AACAS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKR,QAAvC,EAJgB,CAIoC;AACvD;;AASDS,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKP,KAAL,CAAWQ,YAAX,GACA,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWS,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,GAEA,SAJR,EAOI,oBAAC,UAAD;AACI,MAAA,UAAU,EAAE,KAAKT,KAAL,CAAWU,UAD3B;AAEI,MAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWP,QAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AAcH;;AA/BuC;;AAkC5C,MAAMkB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHH,IAAAA,QAAQ,EAAEG,KAAK,CAACC,OAAN,CAAcJ,QADrB;AACyC;AAC5CD,IAAAA,YAAY,EAAEI,KAAK,CAACC,OAAN,CAAcL,YAFzB;AAEyC;AAC5CE,IAAAA,UAAU,EAAEE,KAAK,CAACE,SAAN,CAAgBJ,UAHzB,CAGyC;;AAHzC,GAAP;AAKH,CAND;;AAQA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHxB,IAAAA,iBAAiB,EAAE,MAAM;AAACwB,MAAAA,QAAQ,CAACxB,iBAAiB,EAAlB,CAAR;AAA8B,KADrD;AACyD;AAE5DC,IAAAA,QAAQ,EAAE,MAAM;AAACuB,MAAAA,QAAQ,CAACvB,QAAQ,EAAT,CAAR;AAAqB,KAHnC;AAGyD;AAC5DC,IAAAA,SAAS,EAAE,MAAM;AAACsB,MAAAA,QAAQ,CAACtB,SAAS,EAAV,CAAR;AAAsB,KAJrC;AAIyD;AAC5DC,IAAAA,WAAW,EAAE,MAAM;AAACqB,MAAAA,QAAQ,CAACrB,WAAW,EAAZ,CAAR;AAAwB,KALzC;AAKyD;AAC5DC,IAAAA,UAAU,EAAE,MAAM;AAACoB,MAAAA,QAAQ,CAACpB,UAAU,EAAX,CAAR;AAAuB,KANvC,CAMyD;;AANzD,GAAP;AAQH,CATD;;AAWA,eAAeP,OAAO,CAACsB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ClB,mBAA7C,CAAf","sourcesContent":["// Network Board 컴포넌트의 액션이 담긴 컨테이너 컴포넌트\n\n// 상위 컴포넌트: pages/Network\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport NetworkBoard from \"../components/Network/NetworkBoard\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    getNetworkRequest\n} from \"../store/actions/network\"\n\nimport { \n    headerOn,\n    headerOff,\n    searchBarOn,\n    categoryOn\n} from \"../store/actions/structure\";\n\nclass NetworkingContainer extends Component {    \n\n    componentDidMount() {\n        this.props.headerOn();\n        this.props.searchBarOn();\n        this.props.categoryOn();\n        window.addEventListener('scroll', this.onScroll);   // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    onScroll = (e) => {\n        this.props.headerOff();\n        if(document.documentElement.scrollTop <= 64){\n            this.props.headerOn();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.props.isGetSuccess ?\n                    <NetworkBoard postlist={this.props.postlist}/> :\n                    \"loading\"\n                }\n\n                <SearchIcon\n                    isHeaderOn={this.props.isHeaderOn}\n                    headerOn={this.props.headerOn}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        postlist: state.network.postlist,           // 포스팅들의 데이터\n        isGetSuccess: state.network.isGetSuccess,   // 데이터 get 요청이 성공했는지 여부\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더의 상태\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getNetworkRequest: () => {dispatch(getNetworkRequest())},   // Network Board 데이터를 받아오는 메서드\n\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타내는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더가 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색 바가 나타나게 하는 메서드\n        categoryOn: () => {dispatch(categoryOn())},                 // 카테고리가 나타나게 하는 메서드\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkingContainer);"]},"metadata":{},"sourceType":"module"}