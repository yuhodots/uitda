{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js\";\n//\n// 상위 컴포넌트: pages/Board\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux'; // 컴포넌트\n\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\"; // 액션\n\nimport { headerOn, headerOff, searchBarOn } from \"../store/actions/structure\";\nimport { initiateBoard, getBoardRequest } from '../store/actions/board';\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isGetSuccess: false\n    };\n\n    this.onScroll = e => {\n      let isHeaderOn = this.props.isHeaderOn;\n\n      if (isHeaderOn) {\n        if (document.documentElement.scrollTop > 64) {\n          this.props.headerOff();\n        }\n      } else if (document.documentElement.scrollTop <= 64) {\n        this.props.headerOn();\n      }\n    };\n\n    this._initBoard = async () => {\n      const boardName = this.props.boardName;\n      await this.props.initiateBoard(); // Board 초기화\n\n      this.props.getBoardRequest(boardName, 0); // Board 데이터 GET 요청 \n      // scroll 값으로 this.props.scroll 대신 0을 직접 넣는 이유는,\n      // initiateBoard로 앱의 state를 바꿨어도, \n      // getBoardRequest는 같은 컴포넌트 생활 주기에서 실행된 것이기 때문에\n      // 컴포넌트의 props는 변경되지 않기 때문이다. \n    };\n\n    this._getBoardRequestByScroll = () => {\n      const _this$props = this.props,\n            boardName = _this$props.boardName,\n            scroll = _this$props.scroll;\n      this.props.getBoardRequest(boardName, scroll);\n    };\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          boardName = _this$props2.boardName,\n          scroll = _this$props2.scroll,\n          search = _this$props2.search;\n    console.log(\"Did Mount boardName: \".concat(boardName, \", scroll: \").concat(scroll, \", search: \").concat(search));\n    this.props.headerOn(); // 헤더 On\n\n    this.props.searchBarOn(); // 검색창 On\n\n    this.props.topicSelect(boardName); // app의 topic state를 boardName으로 설정\n\n    this._initBoard(); // Board 초기화 및 scroll 0 데이터 GET 요청\n\n\n    window.addEventListener('scroll', this.onScroll); // Scroll 이벤트가 생길 때, onScroll을 실행함\n  }\n\n  render() {\n    let _this$props3 = this.props,\n        boardName = _this$props3.boardName,\n        postlist = _this$props3.postlist,\n        search = _this$props3.search,\n        isHeaderOn = _this$props3.isHeaderOn,\n        isGetSuccess = _this$props3.isGetSuccess,\n        headerOn = _this$props3.headerOn;\n    console.log(\"render \".concat(isGetSuccess));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, isGetSuccess ? React.createElement(Board, {\n      boardName: boardName,\n      postlist: postlist,\n      search: search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"PageError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"\\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uB20C\\uB7EC\\uC8FC\\uC138\\uC694 :)\"), React.createElement(SearchIcon, {\n      isHeaderOn: isHeaderOn,\n      headerOn: headerOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this._getBoardRequestByScroll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"\\uC2A4\\uD06C\\uB864\"));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isGetSuccess: state.board.isGetSuccess,\n    // GET 요청이 성공했는 지 여부\n    postlist: state.board.postlist,\n    // postlist 데이터\n    scroll: state.board.scroll,\n    // 스크롤 횟수 (데이터를 받은 횟수)\n    search: state.board.search,\n    // 검색어 데이터\n    isHeaderOn: state.structure.isHeaderOn // 헤더가 On 인지\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    headerOn: () => {\n      dispatch(headerOn());\n    },\n    // 헤더를 나타나게 하는 메서드\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더를 사라지게 하는 메서드\n    searchBarOn: () => {\n      dispatch(searchBarOn());\n    },\n    // 검색바를 나타나게 하는 메서드\n    initiateBoard: () => {\n      dispatch(initiateBoard());\n    },\n    // 보드 초기화 메서드 \n    getBoardRequest: (boardName, scroll, search) => {\n      // 보드 GET 요청 메서드\n      dispatch(getBoardRequest(boardName, scroll, search));\n    },\n    topicSelect: topic => {\n      dispatch(topicSelect(topic));\n    } // App의 topic state를 topic 값으로 설정\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js"],"names":["React","Component","connect","Board","SearchIcon","headerOn","headerOff","searchBarOn","initiateBoard","getBoardRequest","topicSelect","BoardContainer","state","isGetSuccess","onScroll","e","isHeaderOn","props","document","documentElement","scrollTop","_initBoard","boardName","_getBoardRequestByScroll","scroll","componentDidMount","search","console","log","window","addEventListener","render","postlist","mapStateToProps","board","structure","mapDispatchToProps","dispatch","topic"],"mappings":"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","sourcesContent":["//\n\n// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    headerOn,\n    headerOff,\n    searchBarOn,\n} from \"../store/actions/structure\"\n\nimport { \n    initiateBoard,\n    getBoardRequest\n} from '../store/actions/board'\n\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {    \n\n    state = {\n        isGetSuccess: false\n    }\n\n    componentDidMount() {\n\n        const { boardName, scroll, search } = this.props;\n\n        console.log(`Did Mount boardName: ${boardName}, scroll: ${scroll}, search: ${search}`)\n\n        this.props.headerOn();                              // 헤더 On\n        this.props.searchBarOn();                           // 검색창 On\n        this.props.topicSelect(boardName);                  // app의 topic state를 boardName으로 설정\n        this._initBoard()                                   // Board 초기화 및 scroll 0 데이터 GET 요청\n\n        window.addEventListener('scroll', this.onScroll);   // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    onScroll = (e) => {\n        let { isHeaderOn } = this.props;\n\n        if (isHeaderOn) {\n            if(document.documentElement.scrollTop > 64){\n                this.props.headerOff();\n            }\n        }\n        else if (document.documentElement.scrollTop <= 64) {\n            this.props.headerOn();\n        }\n    }\n\n    _initBoard = async () => {\n        const { boardName } = this.props;\n        \n        await this.props.initiateBoard();           // Board 초기화\n        this.props.getBoardRequest(boardName, 0);   // Board 데이터 GET 요청 \n                                                    // scroll 값으로 this.props.scroll 대신 0을 직접 넣는 이유는,\n                                                    // initiateBoard로 앱의 state를 바꿨어도, \n                                                    // getBoardRequest는 같은 컴포넌트 생활 주기에서 실행된 것이기 때문에\n                                                    // 컴포넌트의 props는 변경되지 않기 때문이다. \n    }\n\n    _getBoardRequestByScroll = () => {\n        const { boardName, scroll } = this.props\n        this.props.getBoardRequest(boardName, scroll)\n    }\n\n\n    render() {\n\n        let {\n            // properties\n            boardName,\n            postlist,\n            search,\n            isHeaderOn,\n            isGetSuccess,\n\n            // methods\n            headerOn,\n        } = this.props;\n\n        console.log(`render ${isGetSuccess}`);\n\n        return (\n            <div>\n                {\n                    isGetSuccess ?\n                \n                    <Board\n                        boardName={boardName} \n                        postlist={postlist} \n                        search={search}\n                    /> :\n                    <div className='PageError'>\n                        새로고침을 눌러주세요 :)\n                    </div>\n                }              \n                <SearchIcon\n                    isHeaderOn={isHeaderOn}\n                    headerOn={headerOn}\n                />  \n                <button onClick={this._getBoardRequestByScroll}>스크롤</button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,     // GET 요청이 성공했는 지 여부\n        postlist: state.board.postlist,             // postlist 데이터\n        scroll: state.board.scroll,                 // 스크롤 횟수 (데이터를 받은 횟수)\n        search: state.board.search,                 // 검색어 데이터\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더가 On 인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타나게 하는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색바를 나타나게 하는 메서드\n\n        initiateBoard: () => {dispatch(initiateBoard())},             // 보드 초기화 메서드 \n        getBoardRequest: (boardName, scroll, search) => {           // 보드 GET 요청 메서드\n            dispatch(getBoardRequest(boardName, scroll, search))\n        },\n\n        topicSelect: (topic) => {dispatch(topicSelect(topic))},     // App의 topic state를 topic 값으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);"]},"metadata":{},"sourceType":"module"}