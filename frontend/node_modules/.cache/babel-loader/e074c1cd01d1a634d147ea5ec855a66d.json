{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/HeaderContainer.js\";\n// 헤더와 헤더와 관련된 상태를 담은 컴포넌트\n// isHeaderOn, isSearchBarOn, isCategoryOn, isLoggedIn, whichBoard\n// getStatus => ( 한 군데서 처리해도 되지 않을까 ? ), handleLogout \n// 상위 컴포넌트: App\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { getStatusRequest, logoutRequest } from \"../store/actions/auth\";\nimport Header from \"../components/Structure/Header\";\n\nclass HeaderContainer extends Component {\n  componentDidMount() {\n    this.props.getStatusRequest();\n  }\n\n  render() {\n    return React.createElement(Header, {\n      isHeaderOn: this.props.isHeaderOn,\n      isSearchBarOn: this.props.isSearchBarOn,\n      isCategoryOn: this.props.isCategoryOn,\n      isLoggedIn: this.props.isLoggedIn,\n      user: this.props.userInfo,\n      handleLogout: this.props.logoutRequest,\n      getStatus: this.props.getStatusRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isHeaderOn: state.structure.isHeaderOn,\n    // Header가 나타나는 지,\n    isSearchBarOn: state.structure.isSearchBarOn,\n    // 검색바를 나타낼지,\n    isCategoryOn: state.structure.isCategoryOn,\n    // 카테고리 창을 나타낼지,\n    isLoggedIn: state.auth.isLoggedIn,\n    // 로그인 되어있는지,\n    userInfo: state.auth.userInfo // 유저 정보 객체\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      dispatch(getStatusRequest());\n    },\n    logoutRequest: () => {\n      dispatch(logoutRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/HeaderContainer.js"],"names":["React","Component","connect","getStatusRequest","logoutRequest","Header","HeaderContainer","componentDidMount","props","render","isHeaderOn","isSearchBarOn","isCategoryOn","isLoggedIn","userInfo","mapStateToProps","state","structure","auth","mapDispatchToProps","dispatch"],"mappings":";AAAA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACIC,gBADJ,EAEIC,aAFJ,QAGO,uBAHP;AAIA,OAAOC,MAAP,MAAmB,gCAAnB;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAEpCM,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWL,gBAAX;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AACI,MAAA,UAAU,EAAE,KAAKD,KAAL,CAAWE,UAD3B;AAEI,MAAA,aAAa,EAAE,KAAKF,KAAL,CAAWG,aAF9B;AAGI,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,YAH7B;AAII,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWK,UAJ3B;AAKI,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWM,QALrB;AAOI,MAAA,YAAY,EAAE,KAAKN,KAAL,CAAWJ,aAP7B;AAQI,MAAA,SAAS,EAAE,KAAKI,KAAL,CAAWL,gBAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAYH;;AAnBmC;;AAsBxC,MAAMY,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHN,IAAAA,UAAU,EAAEM,KAAK,CAACC,SAAN,CAAgBP,UADzB;AAC6C;AAChDC,IAAAA,aAAa,EAAEK,KAAK,CAACC,SAAN,CAAgBN,aAF5B;AAE6C;AAChDC,IAAAA,YAAY,EAAEI,KAAK,CAACC,SAAN,CAAgBL,YAH3B;AAG6C;AAChDC,IAAAA,UAAU,EAAEG,KAAK,CAACE,IAAN,CAAWL,UAJpB;AAI6C;AAChDC,IAAAA,QAAQ,EAAEE,KAAK,CAACE,IAAN,CAAWJ,QALlB,CAK6C;;AAL7C,GAAP;AAOH,CARD;;AAUA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHjB,IAAAA,gBAAgB,EAAE,MAAM;AAACiB,MAAAA,QAAQ,CAACjB,gBAAgB,EAAjB,CAAR;AAA6B,KADnD;AAEHC,IAAAA,aAAa,EAAE,MAAM;AAACgB,MAAAA,QAAQ,CAAChB,aAAa,EAAd,CAAR;AAA0B;AAF7C,GAAP;AAIH,CALD;;AAOA,eAAeF,OAAO,CAACa,eAAD,EAAkBI,kBAAlB,CAAP,CAA6Cb,eAA7C,CAAf","sourcesContent":["// 헤더와 헤더와 관련된 상태를 담은 컴포넌트\n// isHeaderOn, isSearchBarOn, isCategoryOn, isLoggedIn, whichBoard\n// getStatus => ( 한 군데서 처리해도 되지 않을까 ? ), handleLogout \n\n// 상위 컴포넌트: App\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nimport { \n    getStatusRequest,\n    logoutRequest \n} from \"../store/actions/auth\";\nimport Header from \"../components/Structure/Header\";\n\nclass HeaderContainer extends Component {    \n    \n    componentDidMount() {\n        this.props.getStatusRequest();\n    }\n    \n    render() {\n        return (\n            <Header \n                isHeaderOn={this.props.isHeaderOn}\n                isSearchBarOn={this.props.isSearchBarOn}\n                isCategoryOn={this.props.isCategoryOn}\n                isLoggedIn={this.props.isLoggedIn}\n                user={this.props.userInfo}\n                \n                handleLogout={this.props.logoutRequest}\n                getStatus={this.props.getStatusRequest}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isHeaderOn: state.structure.isHeaderOn,         // Header가 나타나는 지,\n        isSearchBarOn: state.structure.isSearchBarOn,   // 검색바를 나타낼지,\n        isCategoryOn: state.structure.isCategoryOn,     // 카테고리 창을 나타낼지,\n        isLoggedIn: state.auth.isLoggedIn,              // 로그인 되어있는지,\n        userInfo: state.auth.userInfo,                  // 유저 정보 객체\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {dispatch(getStatusRequest())},\n        logoutRequest: () => {dispatch(logoutRequest())}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);"]},"metadata":{},"sourceType":"module"}