{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/yuho8437/Documents/GitHub/uitda/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/BoardDetail/subcomponents/CommentInput.js\";\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-left: 0.5rem;\\n    height: 1.5rem;\\n    width: 1rem;\\n\\n    /* button \\uC2A4\\uD0C0\\uC77C\\uACFC \\uAD00\\uB828\\uB41C \\uC18D\\uC131 */\\n    padding: 0;\\n    outline: none;\\n    border: none;\\n    cursor: pointer;\\n    \\n    background-image: \", \";\\n    background-repeat: no-repeat;\\n    background-size: contain;\\n    background-position: center center;\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    padding: 0;\\n\\n    /* textarea \\uC2A4\\uD0C0\\uC77C\\uACFC \\uAD00\\uB828\\uB41C \\uC18D\\uC131 */\\n    resize: none;\\n    border: none;\\n    outline: 0;\\n\\n    line-height: 1.5rem;\\n    font-size: 0.875rem;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n    flex: 1;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-left: 0.5rem;\\n\\n    border-radius: 1rem;\\n    background-color: \", \";\\n    padding: 0.5rem 1rem 0.25rem 1rem;\\n\\n    flex: 1;\\n    display: flex;\\n    flex-flow: row nowrap;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    margin: 0;\\n\\n    margin-left: \", \";\\n\\n    display: \", \";\\n    flex-flow: row nowrap;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n// 상위 컴포넌트: components/BoardDetail/subcomponents/CommentBox.js\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport SendIcon from './resources/SendIcon_Blue.png';\nimport { CommentItemPhoto } from \"./CommentItem\";\nimport { colors } from \"../../../styles/variables\";\n/* Styled Components */\n\n/* CommentInput의 세부 컴포넌트들을 모두 담는 div 태그\n   (CommentItemPhoto + CommentInputTextArea)\n   isSubComment(bool값)을 props로 받아서 Sub의 경우 왼쪽에 3rem 범위를 준다. \n   isDisplay(bool값) 또한 받아서 false인 경우 display none 시킨다. */\n\nconst CommentInputArea = styled.div(_templateObject(), props => {\n  return props.isSubComment ? '3rem' : 0;\n}, props => {\n  return props.isDisplay ? 'flex' : 'none';\n});\n/* TextArea와 Send 버튼을 포함한 div 태그. (흰색 바탕의 디자인을 가진 div)\n   사진 영역을 제외한 남은 가로길이를 차지하는 flex item인 동시에\n   TextArea + SendButton 인 flex box이다. */\n\nconst CommentInputTextArea = styled.div(_templateObject2(), colors.white);\n/* CommentInput이 TextArea이기 때문에 이를 감싸는 flex item */\n\nconst TextAreaDiv = styled.div(_templateObject3());\n/* 텍스트를 입력할 수 있는 태그\n   'react-textarea-autosize'라이브러리를 이용해서 \n   줄 바꿈 시 자동으로 높이가 조정되는 textarea 태그이다. */\n\nconst TextArea = styled(TextareaAutosize)(_templateObject4());\n/* 작성한 댓글의 데이터를 전송하는 버튼 */\n\nconst SendButton = styled.button(_templateObject5(), props => \"url(\".concat(props.ImgURL, \")\"));\n/* React Component */\n\nclass CommentInput extends Component {\n  // state에 text 내용 저장하기\n\n  /* 버튼을 누르면 POST 요청을 통해 DB 서버에 전송하고,\n     Post Detail 페이지에 대한 GET 요청을 다시 한다. or 리다이렉션 */\n  _handleClick() {}\n\n  render() {\n    const _this$props = this.props,\n          isSubComment = _this$props.isSubComment,\n          isReplySee = _this$props.isReplySee;\n    return React.createElement(CommentInputArea, {\n      isSubComment: isSubComment,\n      isDisplay: isReplySee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(CommentItemPhoto, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(CommentInputTextArea, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(TextAreaDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(SendButton, {\n      ImgURL: SendIcon,\n      onClick: this._handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })));\n  }\n\n}\n\nCommentInput.propTypes = {\n  isSubComment: PropTypes.bool.isRequired,\n  // SubComment인지. 답글이라면 margin-left 값이 추가된다.\n  isReplySee: PropTypes.bool // SubComment의 경우 답글 보기의 여부에 따라 CommentInput가 display none이 결정된다.\n\n};\nCommentInput.defaultProps = {\n  isReplySee: true // SubComment가 아닌 경우 isReplySee가 없고 항상 display되기 때문에 true값을 준다.\n\n};\nexport default CommentInput;","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/BoardDetail/subcomponents/CommentInput.js"],"names":["React","Component","styled","PropTypes","TextareaAutosize","SendIcon","CommentItemPhoto","colors","CommentInputArea","div","props","isSubComment","isDisplay","CommentInputTextArea","white","TextAreaDiv","TextArea","SendButton","button","ImgURL","CommentInput","_handleClick","render","isReplySee","propTypes","bool","isRequired","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AAEA,OAAOC,QAAP,MAAqB,+BAArB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,MAAT,QAAuB,2BAAvB;AAEA;;AAEA;;;;;AAIA,MAAMC,gBAAgB,GAAGN,MAAM,CAACO,GAAV,oBAGHC,KAAK,IAAI;AACpB,SAAOA,KAAK,CAACC,YAAN,GAAqB,MAArB,GAA8B,CAArC;AACH,CALiB,EAOPD,KAAK,IAAI;AAChB,SAAOA,KAAK,CAACE,SAAN,GAAkB,MAAlB,GAA2B,MAAlC;AACH,CATiB,CAAtB;AAaA;;;;AAGA,MAAMC,oBAAoB,GAAGX,MAAM,CAACO,GAAV,qBAIFF,MAAM,CAACO,KAJL,CAA1B;AAYA;;AACA,MAAMC,WAAW,GAAGb,MAAM,CAACO,GAAV,oBAAjB;AAIA;;;;AAGA,MAAMO,QAAQ,GAAGd,MAAM,CAACE,gBAAD,CAAT,oBAAd;AAaA;;AACA,MAAMa,UAAU,GAAGf,MAAM,CAACgB,MAAV,qBAWQR,KAAK,kBAAWA,KAAK,CAACS,MAAjB,MAXb,CAAhB;AAkBA;;AAEA,MAAMC,YAAN,SAA2BnB,SAA3B,CAAqC;AAEjC;;AAEA;;AAEAoB,EAAAA,YAAY,GAAG,CAEd;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAKD,KAAKZ,KALJ;AAAA,UAGDC,YAHC,eAGDA,YAHC;AAAA,UAIDY,UAJC,eAIDA,UAJC;AAOL,WACI,oBAAC,gBAAD;AACI,MAAA,YAAY,EAAEZ,YADlB;AAEI,MAAA,SAAS,EAAEY,UAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII,oBAAC,UAAD;AACI,MAAA,MAAM,EAAElB,QADZ;AAEI,MAAA,OAAO,EAAE,KAAKgB,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CALJ,CADJ;AAiBH;;AAlCgC;;AAsCrCD,YAAY,CAACI,SAAb,GAAyB;AACrBb,EAAAA,YAAY,EAAER,SAAS,CAACsB,IAAV,CAAeC,UADR;AACuB;AAC5CH,EAAAA,UAAU,EAAEpB,SAAS,CAACsB,IAFD,CAEuB;;AAFvB,CAAzB;AAKAL,YAAY,CAACO,YAAb,GAA4B;AACxBJ,EAAAA,UAAU,EAAE,IADY,CACoB;;AADpB,CAA5B;AAKA,eAAeH,YAAf","sourcesContent":["// 상위 컴포넌트: components/BoardDetail/subcomponents/CommentBox.js\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport SendIcon from './resources/SendIcon_Blue.png';\nimport { CommentItemPhoto } from \"./CommentItem\";\nimport { colors } from \"../../../styles/variables\";\n\n/* Styled Components */\n\n/* CommentInput의 세부 컴포넌트들을 모두 담는 div 태그\n   (CommentItemPhoto + CommentInputTextArea)\n   isSubComment(bool값)을 props로 받아서 Sub의 경우 왼쪽에 3rem 범위를 준다. \n   isDisplay(bool값) 또한 받아서 false인 경우 display none 시킨다. */\nconst CommentInputArea = styled.div`\n    margin: 0;\n\n    margin-left: ${props => {\n        return props.isSubComment ? '3rem' : 0\n    }};\n\n    display: ${props => {\n        return props.isDisplay ? 'flex' : 'none'\n    }};\n    flex-flow: row nowrap;\n`;\n\n/* TextArea와 Send 버튼을 포함한 div 태그. (흰색 바탕의 디자인을 가진 div)\n   사진 영역을 제외한 남은 가로길이를 차지하는 flex item인 동시에\n   TextArea + SendButton 인 flex box이다. */\nconst CommentInputTextArea = styled.div`\n    margin-left: 0.5rem;\n\n    border-radius: 1rem;\n    background-color: ${colors.white};\n    padding: 0.5rem 1rem 0.25rem 1rem;\n\n    flex: 1;\n    display: flex;\n    flex-flow: row nowrap;\n`;\n\n/* CommentInput이 TextArea이기 때문에 이를 감싸는 flex item */\nconst TextAreaDiv = styled.div`\n    flex: 1;\n`;\n\n/* 텍스트를 입력할 수 있는 태그\n   'react-textarea-autosize'라이브러리를 이용해서 \n   줄 바꿈 시 자동으로 높이가 조정되는 textarea 태그이다. */\nconst TextArea = styled(TextareaAutosize)`\n    width: 100%;\n    padding: 0;\n\n    /* textarea 스타일과 관련된 속성 */\n    resize: none;\n    border: none;\n    outline: 0;\n\n    line-height: 1.5rem;\n    font-size: 0.875rem;\n`;\n\n/* 작성한 댓글의 데이터를 전송하는 버튼 */\nconst SendButton = styled.button`\n    margin-left: 0.5rem;\n    height: 1.5rem;\n    width: 1rem;\n\n    /* button 스타일과 관련된 속성 */\n    padding: 0;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    \n    background-image: ${props => `url(${props.ImgURL})`};\n    background-repeat: no-repeat;\n    background-size: contain;\n    background-position: center center;\n`;\n\n\n/* React Component */\n\nclass CommentInput extends Component {\n\n    // state에 text 내용 저장하기\n\n    /* 버튼을 누르면 POST 요청을 통해 DB 서버에 전송하고,\n       Post Detail 페이지에 대한 GET 요청을 다시 한다. or 리다이렉션 */\n    _handleClick() {\n\n    }\n\n    render() {\n        \n        const { \n            isSubComment,\n            isReplySee \n        } = this.props;\n\n        return (\n            <CommentInputArea \n                isSubComment={isSubComment} \n                isDisplay={isReplySee}\n            >\n                <CommentItemPhoto />\n                <CommentInputTextArea>\n                    <TextAreaDiv>\n                        <TextArea />\n                    </TextAreaDiv>\n                    <SendButton \n                        ImgURL={SendIcon} \n                        onClick={this._handleClick}\n                    />                   \n                </CommentInputTextArea>\n            </CommentInputArea>\n        )\n    }\n}\n\n\nCommentInput.propTypes = {\n    isSubComment: PropTypes.bool.isRequired,    // SubComment인지. 답글이라면 margin-left 값이 추가된다.\n    isReplySee: PropTypes.bool,                 // SubComment의 경우 답글 보기의 여부에 따라 CommentInput가 display none이 결정된다.\n}\n\nCommentInput.defaultProps = {\n    isReplySee: true                            // SubComment가 아닌 경우 isReplySee가 없고 항상 display되기 때문에 true값을 준다.\n}\n\n\nexport default CommentInput;"]},"metadata":{},"sourceType":"module"}