{"ast":null,"code":"var _jsxFileName = \"/Users/yuho8437/Documents/GitHub/uitda/frontend/src/containers/HeaderContainer.js\";\n// 헤더와 헤더와 관련된 상태를 담은 컴포넌트\n// isHeaderOn, isSearchBarOn, isCategoryOn, isLoggedIn, whichBoard\n// getStatus => ( 한 군데서 처리해도 되지 않을까 ? ), handleLogout \n// 상위 컴포넌트: App\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n/* 액션들 */\n\nimport { getStatusRequest, logoutRequest } from \"../store/actions/auth\";\nimport { getBoardRequest } from \"../store/actions/board\";\nimport Header from \"../components/Structure/Header\";\n\nclass HeaderContainer extends Component {\n  componentDidMount() {\n    this.props.getStatusRequest();\n  }\n\n  render() {\n    const _this$props = this.props,\n          isHeaderOn = _this$props.isHeaderOn,\n          isSearchBarOn = _this$props.isSearchBarOn,\n          isCategoryOn = _this$props.isCategoryOn,\n          isLoggedIn = _this$props.isLoggedIn,\n          userInfo = _this$props.userInfo,\n          topic = _this$props.topic,\n          logoutRequest = _this$props.logoutRequest,\n          getStatusRequest = _this$props.getStatusRequest,\n          getBoardRequest = _this$props.getBoardRequest;\n    return React.createElement(Header, {\n      isHeaderOn: isHeaderOn,\n      isSearchBarOn: isSearchBarOn,\n      isCategoryOn: isCategoryOn,\n      isLoggedIn: isLoggedIn,\n      user: userInfo,\n      topic: topic,\n      handleLogout: logoutRequest,\n      getStatus: getStatusRequest,\n      getBoardRequest: getBoardRequest,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isHeaderOn: state.structure.isHeaderOn,\n    // Header가 나타나는 지,\n    isSearchBarOn: state.structure.isSearchBarOn,\n    // 검색바를 나타낼지,\n    isCategoryOn: state.structure.isCategoryOn,\n    // 카테고리 창을 나타낼지,\n    isLoggedIn: state.auth.isLoggedIn,\n    // 로그인 되어있는지,\n    userInfo: state.auth.userInfo,\n    // 유저 정보 객체\n    topic: state.topic.topic // 현재 무슨 topic인지\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getStatusRequest: () => {\n      dispatch(getStatusRequest());\n    },\n    logoutRequest: () => {\n      dispatch(logoutRequest());\n    },\n    getBoardRequest: (boardName, scroll, search) => {\n      // 검색 시, get request를 보냄\n      dispatch(getBoardRequest(boardName, scroll, search));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/containers/HeaderContainer.js"],"names":["React","Component","connect","getStatusRequest","logoutRequest","getBoardRequest","Header","HeaderContainer","componentDidMount","props","render","isHeaderOn","isSearchBarOn","isCategoryOn","isLoggedIn","userInfo","topic","mapStateToProps","state","structure","auth","mapDispatchToProps","dispatch","boardName","scroll","search"],"mappings":";AAAA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;;AACA,SACIC,gBADJ,EAEIC,aAFJ,QAGO,uBAHP;AAIA,SAASC,eAAT,QAAgC,wBAAhC;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAEpCO,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWN,gBAAX;AACH;;AAEDO,EAAAA,MAAM,GAAG;AAAA,wBAYD,KAAKD,KAZJ;AAAA,UAEDE,UAFC,eAEDA,UAFC;AAAA,UAGDC,aAHC,eAGDA,aAHC;AAAA,UAIDC,YAJC,eAIDA,YAJC;AAAA,UAKDC,UALC,eAKDA,UALC;AAAA,UAMDC,QANC,eAMDA,QANC;AAAA,UAODC,KAPC,eAODA,KAPC;AAAA,UASDZ,aATC,eASDA,aATC;AAAA,UAUDD,gBAVC,eAUDA,gBAVC;AAAA,UAWDE,eAXC,eAWDA,eAXC;AAcL,WACI,oBAAC,MAAD;AACI,MAAA,UAAU,EAAEM,UADhB;AAEI,MAAA,aAAa,EAAEC,aAFnB;AAGI,MAAA,YAAY,EAAEC,YAHlB;AAII,MAAA,UAAU,EAAEC,UAJhB;AAKI,MAAA,IAAI,EAAEC,QALV;AAMI,MAAA,KAAK,EAAEC,KANX;AAQI,MAAA,YAAY,EAAEZ,aARlB;AASI,MAAA,SAAS,EAAED,gBATf;AAUI,MAAA,eAAe,EAAEE,eAVrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAcH;;AAlCmC;;AAqCxC,MAAMY,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHP,IAAAA,UAAU,EAAEO,KAAK,CAACC,SAAN,CAAgBR,UADzB;AAC6C;AAChDC,IAAAA,aAAa,EAAEM,KAAK,CAACC,SAAN,CAAgBP,aAF5B;AAE6C;AAChDC,IAAAA,YAAY,EAAEK,KAAK,CAACC,SAAN,CAAgBN,YAH3B;AAG6C;AAChDC,IAAAA,UAAU,EAAEI,KAAK,CAACE,IAAN,CAAWN,UAJpB;AAI6C;AAChDC,IAAAA,QAAQ,EAAEG,KAAK,CAACE,IAAN,CAAWL,QALlB;AAK6C;AAChDC,IAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYA,KANhB,CAM6C;;AAN7C,GAAP;AAQH,CATD;;AAWA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHnB,IAAAA,gBAAgB,EAAE,MAAM;AAACmB,MAAAA,QAAQ,CAACnB,gBAAgB,EAAjB,CAAR;AAA6B,KADnD;AAEHC,IAAAA,aAAa,EAAE,MAAM;AAACkB,MAAAA,QAAQ,CAAClB,aAAa,EAAd,CAAR;AAA0B,KAF7C;AAGHC,IAAAA,eAAe,EAAE,CAACkB,SAAD,EAAYC,MAAZ,EAAoBC,MAApB,KAA+B;AAAY;AACxDH,MAAAA,QAAQ,CAACjB,eAAe,CAACkB,SAAD,EAAYC,MAAZ,EAAoBC,MAApB,CAAhB,CAAR;AACH;AALE,GAAP;AAOH,CARD;;AAUA,eAAevB,OAAO,CAACe,eAAD,EAAkBI,kBAAlB,CAAP,CAA6Cd,eAA7C,CAAf","sourcesContent":["// 헤더와 헤더와 관련된 상태를 담은 컴포넌트\n// isHeaderOn, isSearchBarOn, isCategoryOn, isLoggedIn, whichBoard\n// getStatus => ( 한 군데서 처리해도 되지 않을까 ? ), handleLogout \n\n// 상위 컴포넌트: App\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n/* 액션들 */\nimport { \n    getStatusRequest,\n    logoutRequest \n} from \"../store/actions/auth\";\nimport { getBoardRequest } from \"../store/actions/board\";\n\nimport Header from \"../components/Structure/Header\";\n\nclass HeaderContainer extends Component {    \n    \n    componentDidMount() {\n        this.props.getStatusRequest();\n    }\n    \n    render() {\n        const {\n            isHeaderOn,\n            isSearchBarOn,\n            isCategoryOn,\n            isLoggedIn,\n            userInfo,\n            topic,\n\n            logoutRequest,\n            getStatusRequest,\n            getBoardRequest\n        } = this.props;\n\n        return (\n            <Header \n                isHeaderOn={isHeaderOn}\n                isSearchBarOn={isSearchBarOn}\n                isCategoryOn={isCategoryOn}\n                isLoggedIn={isLoggedIn}\n                user={userInfo}\n                topic={topic}\n                \n                handleLogout={logoutRequest}\n                getStatus={getStatusRequest}\n                getBoardRequest={getBoardRequest}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isHeaderOn: state.structure.isHeaderOn,         // Header가 나타나는 지,\n        isSearchBarOn: state.structure.isSearchBarOn,   // 검색바를 나타낼지,\n        isCategoryOn: state.structure.isCategoryOn,     // 카테고리 창을 나타낼지,\n        isLoggedIn: state.auth.isLoggedIn,              // 로그인 되어있는지,\n        userInfo: state.auth.userInfo,                  // 유저 정보 객체\n        topic: state.topic.topic,                       // 현재 무슨 topic인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {dispatch(getStatusRequest())},\n        logoutRequest: () => {dispatch(logoutRequest())},\n        getBoardRequest: (boardName, scroll, search) => {           // 검색 시, get request를 보냄\n            dispatch(getBoardRequest(boardName, scroll, search))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);"]},"metadata":{},"sourceType":"module"}