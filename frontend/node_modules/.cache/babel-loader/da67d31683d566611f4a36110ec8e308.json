{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js\";\n//\n// 상위 컴포넌트: pages/Board\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux'; // 컴포넌트\n\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\"; // 액션\n\nimport { headerOn, headerOff, searchBarOn } from \"../store/actions/structure\";\nimport { initiateBoard, getBoardRequest, getBoardRequestByScroll } from '../store/actions/board';\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isGetSuccess: false\n    };\n\n    this.onScroll = e => {\n      let isHeaderOn = this.props.isHeaderOn;\n      let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n      let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n      let clientHeight = document.documentElement.clientHeight; // Header On/Off 관련\n\n      if (isHeaderOn) {\n        if (scrollTop > 64) {\n          this.props.headerOff();\n        }\n      } else if (scrollTop <= 64) {\n        this.props.headerOn();\n      } // 무한 스크롤\n\n\n      if (scrollTop + clientHeight > scrollHeight - 64) {\n        if (!this.props.isLoading) {\n          console.log('hi');\n          this.props.getBoardRequestByScroll();\n        }\n      }\n    };\n\n    this._initBoard = async () => {\n      const boardName = this.props.boardName;\n      await this.props.initiateBoard(); // Board 초기화\n\n      this.props.getBoardRequest(boardName, 0); // Board 데이터 GET 요청 \n      // scroll 값으로 this.props.scroll 대신 0을 직접 넣는 이유는,\n      // initiateBoard로 앱의 state를 바꿨어도, \n      // getBoardRequest는 같은 컴포넌트 생활 주기에서 실행된 것이기 때문에\n      // 컴포넌트의 props는 변경되지 않기 때문이다. \n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          boardName = _this$props.boardName,\n          scroll = _this$props.scroll,\n          search = _this$props.search;\n    console.log(\"Did Mount boardName: \".concat(boardName, \", scroll: \").concat(scroll, \", search: \").concat(search));\n    this.props.headerOn(); // 헤더 On\n\n    this.props.searchBarOn(); // 검색창 On\n\n    this.props.topicSelect(boardName); // app의 topic state를 boardName으로 설정\n\n    this._initBoard(); // Board 초기화 및 scroll 0 데이터 GET 요청\n\n\n    window.addEventListener('scroll', this.onScroll); // Scroll 이벤트가 생길 때, onScroll을 실행함\n  }\n\n  render() {\n    let _this$props2 = this.props,\n        boardName = _this$props2.boardName,\n        postlist = _this$props2.postlist,\n        search = _this$props2.search,\n        isHeaderOn = _this$props2.isHeaderOn,\n        isGetSuccess = _this$props2.isGetSuccess,\n        headerOn = _this$props2.headerOn;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, isGetSuccess ? React.createElement(Board, {\n      boardName: boardName,\n      postlist: postlist,\n      search: search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"PageError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"\\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uB20C\\uB7EC\\uC8FC\\uC138\\uC694 :)\"), React.createElement(SearchIcon, {\n      isHeaderOn: isHeaderOn,\n      headerOn: headerOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isGetSuccess: state.board.isGetSuccess,\n    // GET 요청이 성공했는 지 여부\n    postlist: state.board.postlist,\n    // postlist 데이터\n    scroll: state.board.scroll,\n    // 스크롤 횟수 (데이터를 받은 횟수)\n    search: state.board.search,\n    // 검색어 데이터\n    isLoading: state.board.isLoading,\n    // Scroll GET 대기 여부\n    isHeaderOn: state.structure.isHeaderOn // 헤더가 On 인지\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    headerOn: () => {\n      dispatch(headerOn());\n    },\n    // 헤더를 나타나게 하는 메서드\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더를 사라지게 하는 메서드\n    searchBarOn: () => {\n      dispatch(searchBarOn());\n    },\n    // 검색바를 나타나게 하는 메서드\n    initiateBoard: () => {\n      dispatch(initiateBoard());\n    },\n    // 보드 초기화 메서드 \n    getBoardRequest: (boardName, scroll, search) => {\n      // 보드 GET 요청 메서드\n      dispatch(getBoardRequest(boardName, scroll, search));\n    },\n    getBoardRequestByScroll: (boardName, scroll, search) => {\n      // 보드 Scroll GET 요청 메서드\n      dispatch(getBoardRequestByScroll(boardName, scroll, search));\n    },\n    topicSelect: topic => {\n      dispatch(topicSelect(topic));\n    } // App의 topic state를 topic 값으로 설정\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js"],"names":["React","Component","connect","Board","SearchIcon","headerOn","headerOff","searchBarOn","initiateBoard","getBoardRequest","getBoardRequestByScroll","topicSelect","BoardContainer","state","isGetSuccess","onScroll","e","isHeaderOn","props","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","isLoading","console","log","_initBoard","boardName","componentDidMount","scroll","search","window","addEventListener","render","postlist","mapStateToProps","board","structure","mapDispatchToProps","dispatch","topic"],"mappings":"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","sourcesContent":["//\n\n// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    headerOn,\n    headerOff,\n    searchBarOn,\n} from \"../store/actions/structure\"\n\nimport { \n    initiateBoard,\n    getBoardRequest,\n    getBoardRequestByScroll\n} from '../store/actions/board'\n\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {    \n\n    state = {\n        isGetSuccess: false\n    }\n\n    componentDidMount() {\n\n        const { boardName, scroll, search } = this.props;\n\n        console.log(`Did Mount boardName: ${boardName}, scroll: ${scroll}, search: ${search}`)\n\n        this.props.headerOn();                              // 헤더 On\n        this.props.searchBarOn();                           // 검색창 On\n        this.props.topicSelect(boardName);                  // app의 topic state를 boardName으로 설정\n        this._initBoard()                                   // Board 초기화 및 scroll 0 데이터 GET 요청\n\n        window.addEventListener('scroll', this.onScroll);   // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    onScroll = (e) => {\n        let { isHeaderOn } = this.props;\n\n        let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        let clientHeight = document.documentElement.clientHeight;\n\n        // Header On/Off 관련\n        if (isHeaderOn) {\n            if(scrollTop > 64){\n                this.props.headerOff();\n            }\n        }\n        else if (scrollTop <= 64) {\n            this.props.headerOn();\n        }\n\n        // 무한 스크롤\n        if (scrollTop + clientHeight > scrollHeight - 64) {\n            if( !this.props.isLoading ){\n                console.log('hi');\n                this.props.getBoardRequestByScroll();\n            }\n        }\n    }\n\n    _initBoard = async () => {\n        const { boardName } = this.props;\n        \n        await this.props.initiateBoard();           // Board 초기화\n        this.props.getBoardRequest(boardName, 0);   // Board 데이터 GET 요청 \n                                                    // scroll 값으로 this.props.scroll 대신 0을 직접 넣는 이유는,\n                                                    // initiateBoard로 앱의 state를 바꿨어도, \n                                                    // getBoardRequest는 같은 컴포넌트 생활 주기에서 실행된 것이기 때문에\n                                                    // 컴포넌트의 props는 변경되지 않기 때문이다. \n    }\n\n\n    render() {\n        let {\n            // properties\n            boardName,\n            postlist,\n            search,\n            isHeaderOn,\n            isGetSuccess,\n\n            // methods\n            headerOn,\n        } = this.props;\n\n        return (\n            <div>\n                {\n                    isGetSuccess ?\n                \n                    <Board\n                        boardName={boardName} \n                        postlist={postlist} \n                        search={search}\n                    /> :\n                    <div className='PageError'>\n                        새로고침을 눌러주세요 :)\n                    </div>\n                }              \n                <SearchIcon\n                    isHeaderOn={isHeaderOn}\n                    headerOn={headerOn}\n                />  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,     // GET 요청이 성공했는 지 여부\n        postlist: state.board.postlist,             // postlist 데이터\n        scroll: state.board.scroll,                 // 스크롤 횟수 (데이터를 받은 횟수)\n        search: state.board.search,                 // 검색어 데이터\n        isLoading: state.board.isLoading,           // Scroll GET 대기 여부\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더가 On 인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타나게 하는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색바를 나타나게 하는 메서드\n\n        initiateBoard: () => {dispatch(initiateBoard())},           // 보드 초기화 메서드 \n        getBoardRequest: (boardName, scroll, search) => {           // 보드 GET 요청 메서드\n            dispatch(getBoardRequest(boardName, scroll, search))\n        },\n        getBoardRequestByScroll: (boardName, scroll, search) => {   // 보드 Scroll GET 요청 메서드\n            dispatch(getBoardRequestByScroll(boardName, scroll, search))\n        },\n\n        topicSelect: (topic) => {dispatch(topicSelect(topic))},     // App의 topic state를 topic 값으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);"]},"metadata":{},"sourceType":"module"}