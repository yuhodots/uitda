{"ast":null,"code":"import _defineProperty from \"/Users/yuho8437/Documents/GitHub/uitda/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/Board/Board.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// \n// 상위 컴포넌트: BoardContainer\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport './Board.css';\nimport PostCard from \"./PostCard\";\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._makeStandardList = postlist => {\n      // Postlist의 Post 개수를 3의 배수에 맞도록\n      // Fakecard를 추가해 주는 함수\n      // 반응형 기능을 아직 구현 안함\n      let standardList = [];\n      const fakeCard = {\n        id: -1,\n        title: '',\n        user: {},\n        created: '',\n        description: '',\n        filelist: [],\n        condition: '',\n        price: '',\n        isFake: true\n      };\n      const cardNum = postlist.length;\n      const remain = cardNum % 3;\n      let fakeCardNum = remain ? 3 - remain : 0;\n      standardList = postlist.map(post => {\n        return _objectSpread({}, post, {\n          isFake: false\n        });\n      });\n\n      while (fakeCardNum--) {\n        standardList.push(fakeCard);\n      }\n\n      return standardList;\n    };\n\n    this._renderPostList = postlist => {\n      const boardName = this.props.boardName;\n      return postlist.map((post, idx) => {\n        if (post.id) {\n          return React.createElement(PostCard, {\n            id: post.id,\n            title: post.title,\n            user: post.user,\n            created: post.created,\n            description: post.description,\n            filelist: post.filelist,\n            condition: post.condition,\n            price: post.price,\n            boardName: boardName,\n            isFake: post.isFake,\n            key: idx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          });\n        }\n\n        return null;\n      });\n    };\n  }\n\n  render() {\n    const postlist = this._makeStandardList(this.props.postlist);\n\n    return React.createElement(\"div\", {\n      className: \"BoardTemplate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.props.search ? React.createElement(\"div\", {\n      className: \"SearchInfoBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.search, \" \\uAC80\\uC0C9\")) : '', this._renderPostList(postlist));\n  }\n\n}\n\nBoard.propTypes = {\n  boardName: PropTypes.string.isRequired,\n  // 무슨 보드인지 (market, networking)\n  postlist: PropTypes.array,\n  // 렌더할 Post List 데이터\n  search: PropTypes.string // 검색어 데이터\n\n};\nBoard.defaultProps = {\n  postlist: [],\n  search: ''\n};\nexport default Board;","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/Board/Board.js"],"names":["React","Component","PropTypes","PostCard","Board","_makeStandardList","postlist","standardList","fakeCard","id","title","user","created","description","filelist","condition","price","isFake","cardNum","length","remain","fakeCardNum","map","post","push","_renderPostList","boardName","props","idx","render","search","propTypes","string","isRequired","array","defaultProps"],"mappings":"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","sourcesContent":["// \n\n// 상위 컴포넌트: BoardContainer\n\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './Board.css';\nimport PostCard from \"./PostCard\";\n\nclass Board extends Component {\n\n    _makeStandardList = (postlist) => {\n        // Postlist의 Post 개수를 3의 배수에 맞도록\n        // Fakecard를 추가해 주는 함수\n        // 반응형 기능을 아직 구현 안함\n\n        let standardList = [];\n\n        const fakeCard = {\n            id : -1,\n            title : '',\n            user : {},\n            created : '',\n            description : '',\n            filelist : [],\n            condition : '',\n            price : '',\n            isFake: true\n        };\n\n        const cardNum = postlist.length;\n        const remain = cardNum % 3;\n        let fakeCardNum = remain ? 3 - remain : 0;\n\n        standardList = postlist.map(post => {\n            return {\n                ...post,\n                isFake: false\n            }\n        })\n\n        while(fakeCardNum--){\n            standardList.push(fakeCard)\n        }\n\n        return standardList;\n    }\n\n\n    _renderPostList = (postlist) => {\n        const boardName = this.props.boardName;\n\n        return postlist.map( (post, idx) => {\n            if(post.id){\n                return (\n                    <PostCard\n                        id = {post.id}\n                        title = {post.title}\n                        user = {post.user}\n                        created = {post.created}\n                        description = {post.description}\n                        filelist = {post.filelist}\n                        condition = {post.condition}\n                        price = {post.price}\n                        boardName={boardName}\n                        isFake = {post.isFake}\n                        key = {idx}\n                    />\n                )\n            }\n            return null;\n        })\n    }\n\n    render() {\n        const postlist = this._makeStandardList(this.props.postlist);\n\n        return (\n            <div className=\"BoardTemplate\">\n                {\n                    this.props.search ?\n                    <div className='SearchInfoBox'>\n                        <h2>{this.props.search} 검색</h2>\n                    </div> :\n                    ''\n                }\n                {this._renderPostList(postlist)}\n            </div>\n        )\n    }\n}\n\n\nBoard.propTypes = {\n    boardName: PropTypes.string.isRequired,     // 무슨 보드인지 (market, networking)\n    postlist: PropTypes.array,                  // 렌더할 Post List 데이터\n    search: PropTypes.string,                   // 검색어 데이터\n}\n\nBoard.defaultProps = {\n    postlist: [],\n    search: ''\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}