{"ast":null,"code":"import _defineProperty from \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/components/Board/Board.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// \n// 상위 컴포넌트: BoardContainer\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport './BoardTemplate.css';\nimport PostCard from \"./PostCard\";\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._makeStandardList = postlist => {\n      // Postlist의 Post 개수를 3의 배수에 맞도록\n      // Fakecard를 추가해 주는 함수\n      // 반응형 기능을 아직 구현 안함\n      let standardList = [];\n      const fakeCard = {\n        id: -1,\n        title: '',\n        author: '',\n        created: '',\n        description: '',\n        filenum: 0,\n        isFake: true\n      };\n      const cardNum = postlist.length;\n      const remain = cardNum % 3;\n      let fakeCardNum = remain ? 3 - remain : 0;\n      standardList = postlist.map(post => {\n        return _objectSpread({}, post, {\n          isFake: false\n        });\n      });\n\n      while (fakeCardNum--) {\n        standardList.push(fakeCard);\n      }\n\n      return standardList;\n    };\n\n    this._renderMarketPostList = postlist => {\n      return postlist.map((post, idx) => {\n        return React.createElement(PostCard, {\n          id: post.id,\n          title: post.title,\n          user: post.user,\n          created: post.created,\n          description: post.description,\n          filelist: post.filelist,\n          condition: post.condition,\n          price: post.price,\n          isFake: post.isFake,\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        });\n      });\n    };\n\n    this._renderNetworkPostList = postlist => {\n      return postlist.map((post, idx) => {\n        return React.createElement(PostCard, {\n          id: post.id,\n          title: post.title,\n          user: post.user,\n          created: post.created,\n          description: post.description,\n          filelist: post.filelist,\n          condition: post.condition,\n          isFake: post.isFake,\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      });\n    };\n  }\n\n  render() {\n    const postlist = this._makeStandardList(this.props.postlist);\n\n    let renderPostList;\n\n    switch (this.props.boardName) {\n      case 'market':\n        renderPostList = this._renderMarketPostList;\n        break;\n\n      case 'network':\n        renderPostList = this._renderNetworkPostList;\n        break;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"BoardTemplate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.search ? React.createElement(\"div\", {\n      className: \"SearchInfoBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.props.search, \" \\uAC80\\uC0C9\")) : '', renderPostList(postlist));\n  }\n\n}\n\nBoard.propTypes = {\n  boardName: PropTypes.string.isRequired,\n  // 무슨 보드인지 (market, network)\n  postlist: PropTypes.array,\n  // 렌더할 Post List 데이터\n  search: PropTypes.string // 검색어 데이터\n\n};\nBoard.defaultProps = {\n  postlist: [],\n  search: ''\n};\nexport default Board;","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/components/Board/Board.js"],"names":["React","Component","PropTypes","PostCard","Board","_makeStandardList","postlist","standardList","fakeCard","id","title","author","created","description","filenum","isFake","cardNum","length","remain","fakeCardNum","map","post","push","_renderMarketPostList","idx","user","filelist","condition","price","_renderNetworkPostList","render","props","renderPostList","boardName","search","propTypes","string","isRequired","array","defaultProps"],"mappings":"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","sourcesContent":["// \n\n// 상위 컴포넌트: BoardContainer\n\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './BoardTemplate.css';\nimport PostCard from \"./PostCard\";\n\nclass Board extends Component {\n\n    _makeStandardList = (postlist) => {\n        // Postlist의 Post 개수를 3의 배수에 맞도록\n        // Fakecard를 추가해 주는 함수\n        // 반응형 기능을 아직 구현 안함\n\n        let standardList = [];\n\n        const fakeCard = {\n            id : -1,\n            title : '',\n            author : '',\n            created : '',\n            description : '',\n            filenum : 0,\n            isFake: true\n        };\n\n        const cardNum = postlist.length;\n        const remain = cardNum % 3;\n        let fakeCardNum = remain ? 3 - remain : 0;\n\n        standardList = postlist.map(post => {\n            return {\n                ...post,\n                isFake: false\n            }\n        })\n\n        while(fakeCardNum--){\n            standardList.push(fakeCard)\n        }\n\n        return standardList;\n    }\n\n\n    _renderMarketPostList = (postlist) => {\n        return postlist.map( (post, idx) => {\n            return (\n                <PostCard\n                    id = {post.id}\n                    title = {post.title}\n                    user = {post.user}\n                    created = {post.created}\n                    description = {post.description}\n                    filelist = {post.filelist}\n                    condition = {post.condition}\n                    price = {post.price}\n                    isFake = {post.isFake}\n                    key = {idx}\n                />\n            )\n        })\n    }\n\n    _renderNetworkPostList = (postlist) => {\n        return postlist.map( (post, idx) => {\n            return (\n                <PostCard\n                    id = {post.id}\n                    title = {post.title}\n                    user = {post.user}\n                    created = {post.created}\n                    description = {post.description}\n                    filelist = {post.filelist}\n                    condition= {post.condition}\n                    isFake = {post.isFake}\n                    key = {idx}\n                />\n            )\n        })\n    }\n\n    render() {\n        const postlist = this._makeStandardList(this.props.postlist);\n        let renderPostList;\n\n        switch (this.props.boardName) {\n            case 'market':\n                renderPostList = this._renderMarketPostList;\n                break;\n        \n            case 'network':\n                renderPostList = this._renderNetworkPostList;\n                break;\n        }\n\n        return (\n            <div className=\"BoardTemplate\">\n                {\n                    this.props.search ?\n                    <div className='SearchInfoBox'>\n                        <h2>{this.props.search} 검색</h2>\n                    </div> :\n                    ''\n                }\n                {renderPostList(postlist)}\n            </div>\n        )\n    }\n}\n\n\nBoard.propTypes = {\n    boardName: PropTypes.string.isRequired,     // 무슨 보드인지 (market, network)\n    postlist: PropTypes.array,                  // 렌더할 Post List 데이터\n    search: PropTypes.string,                   // 검색어 데이터\n}\n\nBoard.defaultProps = {\n    postlist: [],\n    search: ''\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}