{"ast":null,"code":"var _jsxFileName = \"/Users/yuho8437/Documents/GitHub/uitda/frontend/src/containers/BoardDetailContainer.js\";\n// 상위 컴포넌트: pages/Board\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport BoardDetail from \"../components/BoardDetail\";\nimport { getBoardDetailRequest } from '../store/actions/board';\nimport { headerOff } from \"../store/actions/structure\";\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardDetailContainer extends Component {\n  componentDidMount() {\n    const _this$props$match$par = this.props.match.params,\n          boardName = _this$props$match$par.boardName,\n          id = _this$props$match$par.id;\n    this.props.headerOff(); // 헤더 Off\n\n    this.props.topicSelect(boardName);\n    this.props.getBoardDetailRequest(boardName, id);\n  }\n\n  render() {\n    const _this$props = this.props,\n          isGetSuccess = _this$props.isGetSuccess,\n          post = _this$props.post;\n    return isGetSuccess ? React.createElement(BoardDetail, {\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n}\n\nBoardDetailContainer.propTypes = {\n  match: PropTypes.object.isRequired // url을 통해 넘겨 받는 값. params.id 가 id 값이다.\n\n};\n\nconst mapStateToProps = state => {\n  return {\n    isGetSuccess: state.board.isGetSuccess,\n    // GET 요청이 성공했는 지 여부\n    post: state.board.post // 포스팅 데이터\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더를 사라지게 하는 메서드\n    topicSelect: boardName => {\n      // 토픽을 설정함\n      dispatch(topicSelect(boardName));\n    },\n    getBoardDetailRequest: (boardName, id) => {\n      // backend 서버에 GET 요청\n      dispatch(getBoardDetailRequest(boardName, id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardDetailContainer);","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/containers/BoardDetailContainer.js"],"names":["React","Component","connect","PropTypes","BoardDetail","getBoardDetailRequest","headerOff","topicSelect","BoardDetailContainer","componentDidMount","props","match","params","boardName","id","render","isGetSuccess","post","propTypes","object","isRequired","mapStateToProps","state","board","mapDispatchToProps","dispatch"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,SAASC,qBAAT,QAAsC,wBAAtC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,oBAAN,SAAmCP,SAAnC,CAA6C;AAEzCQ,EAAAA,iBAAiB,GAAI;AAAA,kCAES,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAF1B;AAAA,UAETC,SAFS,yBAETA,SAFS;AAAA,UAEEC,EAFF,yBAEEA,EAFF;AAIjB,SAAKJ,KAAL,CAAWJ,SAAX,GAJiB,CAIoC;;AACrD,SAAKI,KAAL,CAAWH,WAAX,CAAuBM,SAAvB;AAEA,SAAKH,KAAL,CAAWL,qBAAX,CAAiCQ,SAAjC,EAA4CC,EAA5C;AACH;;AAGDC,EAAAA,MAAM,GAAG;AAAA,wBAC0B,KAAKL,KAD/B;AAAA,UACGM,YADH,eACGA,YADH;AAAA,UACiBC,IADjB,eACiBA,IADjB;AAGL,WACID,YAAY,GACZ,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAEC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY,GAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AAQH;;AAxBwC;;AA2B7CT,oBAAoB,CAACU,SAArB,GAAiC;AAC7BP,EAAAA,KAAK,EAAER,SAAS,CAACgB,MAAV,CAAiBC,UADK,CACe;;AADf,CAAjC;;AAKA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHN,IAAAA,YAAY,EAAEM,KAAK,CAACC,KAAN,CAAYP,YADvB;AACyD;AAC5DC,IAAAA,IAAI,EAAEK,KAAK,CAACC,KAAN,CAAYN,IAFf,CAEyD;;AAFzD,GAAP;AAIH,CALD;;AAQA,MAAMO,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACHnB,IAAAA,SAAS,EAAE,MAAM;AAACmB,MAAAA,QAAQ,CAACnB,SAAS,EAAV,CAAR;AAAsB,KADrC;AACyD;AAC5DC,IAAAA,WAAW,EAAGM,SAAD,IAAe;AAAgC;AACxDY,MAAAA,QAAQ,CAAClB,WAAW,CAACM,SAAD,CAAZ,CAAR;AACH,KAJE;AAKHR,IAAAA,qBAAqB,EAAE,CAACQ,SAAD,EAAYC,EAAZ,KAAmB;AAAkB;AACxDW,MAAAA,QAAQ,CAACpB,qBAAqB,CAACQ,SAAD,EAAYC,EAAZ,CAAtB,CAAR;AACH;AAPE,GAAP;AASH,CAVD;;AAaA,eAAeZ,OAAO,CAACmB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChB,oBAA7C,CAAf","sourcesContent":["// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport BoardDetail from \"../components/BoardDetail\";\n\nimport { getBoardDetailRequest } from '../store/actions/board';\nimport { headerOff } from \"../store/actions/structure\"\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardDetailContainer extends Component {\n\n    componentDidMount () {\n\n        const { boardName, id } = this.props.match.params;\n\n        this.props.headerOff();                              // 헤더 Off\n        this.props.topicSelect(boardName);\n\n        this.props.getBoardDetailRequest(boardName, id);\n    }\n\n\n    render() {\n        const { isGetSuccess, post } = this.props;\n\n        return (\n            isGetSuccess ?\n            <BoardDetail post={post} /> :\n            <div>\n                {/* 앗, 이런..\n                페이지 로딩 중 오류가 발생했습니다 :( */}\n            </div>\n        )\n    }\n}\n\nBoardDetailContainer.propTypes = {\n    match: PropTypes.object.isRequired,         // url을 통해 넘겨 받는 값. params.id 가 id 값이다.\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,                     // GET 요청이 성공했는 지 여부\n        post: state.board.post,                                     // 포스팅 데이터\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        topicSelect: (boardName) => {                               // 토픽을 설정함\n            dispatch(topicSelect(boardName))\n        },              \n        getBoardDetailRequest: (boardName, id) => {                 // backend 서버에 GET 요청\n            dispatch(getBoardDetailRequest(boardName, id))\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardDetailContainer);"]},"metadata":{},"sourceType":"module"}