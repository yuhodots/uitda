{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js\";\n//\n// 상위 컴포넌트: pages/Board\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux'; // 컴포넌트\n\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\"; // 액션\n\nimport { headerOn, headerOff, searchBarOn } from \"../store/actions/structure\";\nimport { initiateBoard, getBoardRequest, getBoardRequestByScroll } from '../store/actions/board';\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this._initBoard = async () => {\n      await this.props.initiateBoard(); // Board 초기화\n    };\n\n    this._handleScroll = e => {\n      let _this$props = this.props,\n          isHeaderOn = _this$props.isHeaderOn,\n          boardName = _this$props.boardName,\n          scroll = _this$props.scroll,\n          search = _this$props.search;\n      let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n      let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n      let clientHeight = document.documentElement.clientHeight; // Header On/Off 관련\n\n      if (isHeaderOn) {\n        if (scrollTop > 64) {\n          this.props.headerOff();\n        }\n      } else if (scrollTop <= 64) {\n        this.props.headerOn();\n      } // 무한 스크롤\n\n\n      if (scrollTop + clientHeight > scrollHeight - 64) {\n        if (!this.props.isLoading) {\n          this.props.getBoardRequestByScroll(boardName, scroll, search);\n        }\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this._initBoard(); // Board 초기화 및 scroll 0 데이터 GET 요청\n\n    const _this$props2 = this.props,\n          boardName = _this$props2.boardName,\n          scroll = _this$props2.scroll;\n    this.props.headerOn(); // 헤더 On\n\n    this.props.searchBarOn(); // 검색창 On\n\n    this.props.topicSelect(boardName); // app의 topic state를 boardName으로 설정\n\n    this.props.getBoardRequest(boardName, scroll);\n    window.addEventListener('scroll', this._handleScroll); // Scroll 이벤트가 생길 때, onScroll을 실행함\n  }\n\n  async componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this._handleScroll);\n  }\n\n  render() {\n    let _this$props3 = this.props,\n        boardName = _this$props3.boardName,\n        postlist = _this$props3.postlist,\n        search = _this$props3.search,\n        isHeaderOn = _this$props3.isHeaderOn,\n        isGetSuccess = _this$props3.isGetSuccess,\n        headerOn = _this$props3.headerOn;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, isGetSuccess ? React.createElement(Board, {\n      boardName: boardName,\n      postlist: postlist,\n      search: search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"PageError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"\\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uB20C\\uB7EC\\uC8FC\\uC138\\uC694 :)\"), React.createElement(SearchIcon, {\n      isHeaderOn: isHeaderOn,\n      headerOn: headerOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isGetSuccess: state.board.isGetSuccess,\n    // GET 요청이 성공했는 지 여부\n    postlist: state.board.postlist,\n    // postlist 데이터\n    scroll: state.board.scroll,\n    // 스크롤 횟수 (데이터를 받은 횟수)\n    search: state.board.search,\n    // 검색어 데이터\n    isLoading: state.board.isLoading,\n    // Scroll GET 대기 여부\n    isHeaderOn: state.structure.isHeaderOn // 헤더가 On 인지\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    headerOn: () => {\n      dispatch(headerOn());\n    },\n    // 헤더를 나타나게 하는 메서드\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더를 사라지게 하는 메서드\n    searchBarOn: () => {\n      dispatch(searchBarOn());\n    },\n    // 검색바를 나타나게 하는 메서드\n    initiateBoard: () => {\n      dispatch(initiateBoard());\n    },\n    // 보드 초기화 메서드 \n    getBoardRequest: (boardName, scroll, search) => {\n      // 보드 GET 요청 메서드\n      dispatch(getBoardRequest(boardName, scroll, search));\n    },\n    getBoardRequestByScroll: (boardName, scroll, search) => {\n      // 보드 Scroll GET 요청 메서드\n      dispatch(getBoardRequestByScroll(boardName, scroll, search));\n    },\n    topicSelect: topic => {\n      dispatch(topicSelect(topic));\n    } // App의 topic state를 topic 값으로 설정\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js"],"names":["React","Component","connect","Board","SearchIcon","headerOn","headerOff","searchBarOn","initiateBoard","getBoardRequest","getBoardRequestByScroll","topicSelect","BoardContainer","_initBoard","props","_handleScroll","e","isHeaderOn","boardName","scroll","search","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","isLoading","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","postlist","isGetSuccess","mapStateToProps","state","board","structure","mapDispatchToProps","dispatch","topic"],"mappings":"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","sourcesContent":["//\n\n// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    headerOn,\n    headerOff,\n    searchBarOn,\n} from \"../store/actions/structure\"\n\nimport { \n    initiateBoard,\n    getBoardRequest,\n    getBoardRequestByScroll\n} from '../store/actions/board'\n\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {    \n\n\n    async componentDidMount() {\n\n        await this._initBoard()                                   // Board 초기화 및 scroll 0 데이터 GET 요청\n        const { boardName, scroll } = this.props;\n\n        this.props.headerOn();                              // 헤더 On\n        this.props.searchBarOn();                           // 검색창 On\n        this.props.topicSelect(boardName);                  // app의 topic state를 boardName으로 설정\n\n        this.props.getBoardRequest(boardName, scroll);\n\n        window.addEventListener('scroll', this._handleScroll);   // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    async componentWillUnmount () {\n        window.removeEventListener(\"scroll\", this._handleScroll);\n    }\n\n    _initBoard = async () => {\n        await this.props.initiateBoard();               // Board 초기화\n    }\n\n    _handleScroll = (e) => {\n        let { isHeaderOn, boardName, scroll, search } = this.props;\n\n        let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        let clientHeight = document.documentElement.clientHeight;\n\n        // Header On/Off 관련\n        if (isHeaderOn) {\n            if(scrollTop > 64){\n                this.props.headerOff();\n            }\n        }\n        else if (scrollTop <= 64) {\n            this.props.headerOn();\n        }\n\n        // 무한 스크롤\n        if (scrollTop + clientHeight > scrollHeight - 64) {\n            if( !this.props.isLoading ){\n                this.props.getBoardRequestByScroll( boardName, scroll, search );\n            }\n        }\n    }\n\n\n    render() {\n        let {\n            // properties\n            boardName,\n            postlist,\n            search,\n            isHeaderOn,\n            isGetSuccess,\n\n            // methods\n            headerOn,\n        } = this.props;\n\n        return (\n            <div>\n                {\n                    isGetSuccess ?\n                \n                    <Board\n                        boardName={boardName} \n                        postlist={postlist} \n                        search={search}\n                    /> :\n                    <div className='PageError'>\n                        새로고침을 눌러주세요 :)\n                    </div>\n                }              \n                <SearchIcon\n                    isHeaderOn={isHeaderOn}\n                    headerOn={headerOn}\n                />  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,     // GET 요청이 성공했는 지 여부\n        postlist: state.board.postlist,             // postlist 데이터\n        scroll: state.board.scroll,                 // 스크롤 횟수 (데이터를 받은 횟수)\n        search: state.board.search,                 // 검색어 데이터\n        isLoading: state.board.isLoading,           // Scroll GET 대기 여부\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더가 On 인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타나게 하는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색바를 나타나게 하는 메서드\n\n        initiateBoard: () => {dispatch(initiateBoard())},           // 보드 초기화 메서드 \n        getBoardRequest: (boardName, scroll, search) => {           // 보드 GET 요청 메서드\n            dispatch(getBoardRequest(boardName, scroll, search))\n        },\n        getBoardRequestByScroll: (boardName, scroll, search) => {   // 보드 Scroll GET 요청 메서드\n            dispatch(getBoardRequestByScroll(boardName, scroll, search))\n        },\n\n        topicSelect: (topic) => {dispatch(topicSelect(topic))},     // App의 topic state를 topic 값으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);"]},"metadata":{},"sourceType":"module"}