{"ast":null,"code":"import axios from 'axios';\nimport { BOARD_INIT, BOARD_GET_SUCCESS, BOARD_GET_FAILURE, BOARD_SCROLL_GET, BOARD_SCROLL_GET_SUCCESS, BOARD_SCROLL_GET_FAILURE } from \"./ActionTypes\"; // Board 초기화 액션 생성자\n\nexport function initiateBoard() {\n  return {\n    type: BOARD_INIT\n  };\n} // Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search, successAction = getBoardSuccess, failureAction = getBoardFailure) {\n  return dispatch => {\n    /* search 데이터를 정제하는 과정(함수) 필요 */\n    // GET 요청을 보낼 url\n    // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n    const GETurl = \"/api/\".concat(boardName, \"/?scroll=\").concat(scroll).concat(search ? \"&q=\".concat(search) : ''); // GETurl로 GET 요청 보내기\n\n    return axios.get(GETurl) // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n    .then(res => res.data.postlist).then(postlist => {\n      console.log(postlist);\n      dispatch(successAction(search, postlist));\n    }) // 실패하면, 실패 액션을 dispatch 한다.\n    .catch(err => {\n      dispatch(failureAction(err));\n    });\n  };\n}\nexport function getBoardSuccess(search = '', postlist) {\n  return {\n    type: BOARD_GET_SUCCESS,\n    search,\n    postlist\n  };\n}\nexport function getBoardFailure(err) {\n  return {\n    type: BOARD_GET_FAILURE,\n    err\n  };\n}\nexport function getBoardRequestByScroll(boardName, scroll, search) {\n  return dispatch => {\n    dispatch(getBoardByScroll);\n    setTimeout(() => {\n      dispatch(getBoardRequest(boardName, scroll, search, getBoardByScrollSuccess, getBoardByScrollFailure));\n    }, 750);\n  };\n}\nexport function getBoardByScroll() {\n  return {\n    type: BOARD_SCROLL_GET\n  };\n}\nexport function getBoardByScrollSuccess(search = '', postlist) {\n  return {\n    type: BOARD_SCROLL_GET_SUCCESS,\n    search,\n    postlist\n  };\n}\nexport function getBoardByScrollFailure(err) {\n  return {\n    type: BOARD_SCROLL_GET_FAILURE,\n    err\n  };\n}","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/store/actions/board.js"],"names":["axios","BOARD_INIT","BOARD_GET_SUCCESS","BOARD_GET_FAILURE","BOARD_SCROLL_GET","BOARD_SCROLL_GET_SUCCESS","BOARD_SCROLL_GET_FAILURE","initiateBoard","type","getBoardRequest","boardName","scroll","search","successAction","getBoardSuccess","failureAction","getBoardFailure","dispatch","GETurl","get","then","res","data","postlist","console","log","catch","err","getBoardRequestByScroll","getBoardByScroll","setTimeout","getBoardByScrollSuccess","getBoardByScrollFailure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,UADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,gBAJJ,EAKIC,wBALJ,EAMIC,wBANJ,QAOO,eAPP,C,CAUA;;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC5B,SAAO;AACHC,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,C,CAGD;;AAEA,OAAO,SAASQ,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoDC,aAAa,GAAGC,eAApE,EAAqFC,aAAa,GAAGC,eAArG,EAAsH;AACzH,SAAQC,QAAD,IAAc;AAEjB;AAEA;AACA;AACA,UAAMC,MAAM,kBAAWR,SAAX,sBAAgCC,MAAhC,SAAyCC,MAAM,gBAAOA,MAAP,IAAgB,EAA/D,CAAZ,CANiB,CAQjB;;AACA,WAAOZ,KAAK,CAACmB,GAAN,CAAUD,MAAV,EAEP;AAFO,KAGNE,IAHM,CAGDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,QAHf,EAINH,IAJM,CAIDG,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAN,MAAAA,QAAQ,CAACJ,aAAa,CAACD,MAAD,EAASW,QAAT,CAAd,CAAR;AACH,KAPM,EASP;AATO,KAUNG,KAVM,CAUAC,GAAG,IAAI;AACVV,MAAAA,QAAQ,CAACF,aAAa,CAACY,GAAD,CAAd,CAAR;AACH,KAZM,CAAP;AAaH,GAtBD;AAuBH;AAED,OAAO,SAASb,eAAT,CAAyBF,MAAM,GAAG,EAAlC,EAAsCW,QAAtC,EAAgD;AACnD,SAAO;AACHf,IAAAA,IAAI,EAAEN,iBADH;AAEHU,IAAAA,MAFG;AAGHW,IAAAA;AAHG,GAAP;AAKH;AAED,OAAO,SAASP,eAAT,CAAyBW,GAAzB,EAA8B;AACjC,SAAO;AACHnB,IAAAA,IAAI,EAAEL,iBADH;AAEHwB,IAAAA;AAFG,GAAP;AAIH;AAGD,OAAO,SAASC,uBAAT,CAAiClB,SAAjC,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4D;AAC/D,SAAQK,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACY,gBAAD,CAAR;AACAC,IAAAA,UAAU,CAAC,MAAM;AACbb,MAAAA,QAAQ,CAACR,eAAe,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,MAApB,EAA4BmB,uBAA5B,EAAqDC,uBAArD,CAAhB,CAAR;AACH,KAFS,EAEP,GAFO,CAAV;AAGH,GALD;AAMH;AAED,OAAO,SAASH,gBAAT,GAA4B;AAC/B,SAAO;AACHrB,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH;AAED,OAAO,SAAS2B,uBAAT,CAAiCnB,MAAM,GAAG,EAA1C,EAA8CW,QAA9C,EAAwD;AAC3D,SAAO;AACHf,IAAAA,IAAI,EAAEH,wBADH;AAEHO,IAAAA,MAFG;AAGHW,IAAAA;AAHG,GAAP;AAKH;AAED,OAAO,SAASS,uBAAT,CAAiCL,GAAjC,EAAsC;AACzC,SAAO;AACHnB,IAAAA,IAAI,EAAEF,wBADH;AAEHqB,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import axios from 'axios';\n\nimport { \n    BOARD_INIT,\n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_SCROLL_GET,\n    BOARD_SCROLL_GET_SUCCESS,\n    BOARD_SCROLL_GET_FAILURE\n} from \"./ActionTypes\";\n\n\n// Board 초기화 액션 생성자\n\nexport function initiateBoard() {\n    return {\n        type: BOARD_INIT\n    }\n}\n\n\n// Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search, successAction = getBoardSuccess, failureAction = getBoardFailure) {\n    return (dispatch) => {\n\n        /* search 데이터를 정제하는 과정(함수) 필요 */\n\n        // GET 요청을 보낼 url\n        // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n        const GETurl = `/api/${boardName}/?scroll=${scroll}${search?`&q=${search}`:''}`;    \n\n        // GETurl로 GET 요청 보내기\n        return axios.get(GETurl)\n        \n        // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n        .then(res => res.data.postlist)\n        .then(postlist => {\n            console.log(postlist)\n            dispatch(successAction(search, postlist))\n        })\n        \n        // 실패하면, 실패 액션을 dispatch 한다.\n        .catch(err => {\n            dispatch(failureAction(err))\n        })\n    }\n}\n\nexport function getBoardSuccess(search = '', postlist) {\n    return {\n        type: BOARD_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardFailure(err) {\n    return {\n        type: BOARD_GET_FAILURE,\n        err\n    }\n}\n\n\nexport function getBoardRequestByScroll(boardName, scroll, search) {\n    return (dispatch) => {\n        dispatch(getBoardByScroll);\n        setTimeout(() => {\n            dispatch(getBoardRequest(boardName, scroll, search, getBoardByScrollSuccess, getBoardByScrollFailure));\n        }, 750);\n    }\n}\n\nexport function getBoardByScroll() {\n    return {\n        type: BOARD_SCROLL_GET\n    }\n}\n\nexport function getBoardByScrollSuccess(search = '', postlist) {\n    return {\n        type: BOARD_SCROLL_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardByScrollFailure(err) {\n    return {\n        type: BOARD_SCROLL_GET_FAILURE,\n        err\n    }\n}"]},"metadata":{},"sourceType":"module"}