{"ast":null,"code":"import _defineProperty from \"/Users/yuho8437/Documents/GitHub/uitda/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/yuho8437/Documents/GitHub/uitda/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/BoardDetail/subcomponents/CommentItem.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject13() {\n  const data = _taggedTemplateLiteral([\"\\n    position: absolute;\\n    bottom: 0.5em;\\n\"]);\n\n  _templateObject13 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  const data = _taggedTemplateLiteral([\"\\n    visibility: hidden;             /* \\uACF5\\uAC04\\uC740 \\uCC28\\uC9C0\\uD558\\uB418 \\uBCF4\\uC774\\uC9C0\\uB294 \\uC54A\\uAC8C \\uD568 !! */\\n\"]);\n\n  _templateObject12 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  const data = _taggedTemplateLiteral([\"\\n    position: relative;\\n    height: 100%;\\n    line-height: 1.33em;\\n    font-size: 0.75rem;\\n    color: \", \";\\n    margin-left: 0.5rem;\\n    white-space: nowrap;            /* \\uC904\\uBC14\\uAFC8\\uC744 \\uC5C6\\uC560\\uB294 \\uC18D\\uC131 !! */\\n\\n    flex: 1 auto;\\n\"]);\n\n  _templateObject11 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  const data = _taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-flow: row nowrap;\\n\"]);\n\n  _templateObject10 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-left: 3rem;\\n    margin-bottom: 0.5rem;\\n\\n    display: \", \";\\n    flex-flow: row nowrap;\\n\"]);\n\n  _templateObject9 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-left: 2em;\\n\\n    border: none;\\n    outline: 0;\\n    text-decoration: none;\\n    background-color: \", \";\\n    cursor: pointer;\\n\"]);\n\n  _templateObject8 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  const data = _taggedTemplateLiteral([\"\\n    margin: 0;\\n    margin-left: 3.75rem;\\n   \\n    height: 1rem;\\n    line-height: 1.33em;\\n    font-size: 0.75rem;\\n    color: \", \";\\n\"]);\n\n  _templateObject7 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"\\n   border-radius: 1rem;\\n   background-color: \", \";\\n   padding: 0.5rem 1rem;\\n\\n   line-height: 1.5rem;\\n   font-size: 0.875rem;\\n\\n   display: inline-block;\\n\"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"\\n   margin-left: 0.5rem;\\n   flex: 1;\\n\"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n   height: 2.5rem;\\n   width: 2.5rem;\\n   border-radius: 50%;\\n   background-color: \", \";\\n\\n   flex-basis: 2.5rem;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n   width: 100%;\\n   margin: 0;\\n   margin-bottom: 0.5rem;\\n\\n   display: flex;\\n   flex-direction: row;\\n   flex-wrap: nowrap;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n   margin: 0;\\n   margin-bottom: 0.5rem;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    margin-bottom: \", \";\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n// 상위 컴포넌트: components/BoardDetail/subcomponents/CommentBox.js\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport CommentInput from \"./CommentInput\";\nimport { colors } from \"../../../styles/variables\";\n/* Styled Components */\n\n/* Root Leaf + Sub Leaf \n   루트가 되는 댓글과 답글을 포함하는 div */\n\nconst CommentStem = styled.div(_templateObject(), props => {\n  return props.isReplySee ? '2rem' : '1rem';\n});\n/* 댓글의 하나의 덩어리 (PhotoTextItem + AdditionalFucDiv)\n   작성자 사진, 댓글 텍스트(작성자 이름 포함), 대댓글 달기 아이콘, 시간 정보를 포함한다. */\n\nconst CommentLeaf = styled.div(_templateObject2());\n/* 작성자 사진, 텍스트 데이터를 담는 div */\n\nconst PhotoTextItem = styled.div(_templateObject3());\n/* 댓글 작성자 사진 */\n\nexport const CommentItemPhoto = styled.div(_templateObject4(), colors.white);\n/* 댓글이 2줄이 넘어갈 때, 텍스트 영역의 가로 길이를 알려주기 위함 */\n\nconst TextZone = styled.div(_templateObject5());\n/* 댓글 텍스트를 담은 흰색 둥근 모서리 div 태그 */\n\nconst CommentItemText = styled.div(_templateObject6(), colors.white);\n/* 댓글달기, 시간정보를 담은 영역 */\n\nconst AdditionalFuncDiv = styled.div(_templateObject7(), colors.gray_fontColor);\n/* 답글보기 버튼 */\n\nconst ReplySeeButton = styled.button(_templateObject8(), colors.gray_bg);\n/* 답글의 하나의 덩어리 (Photo + Text + 작성시간)\n   댓글과는 다르게 작성자 사진, 댓글 텍스트(작성자 이름 포함), 시간 정보를 한 라인으로 나타낸다 */\n\nconst SubCommentLeaf = styled.div(_templateObject9(), props => {\n  return props.isDisplay ? 'flex' : 'none';\n});\n/* SubComment의 경우 TextZone에 시간정보를 담은 애도 있기 때문에\n   CommentItemText + CreatedDivForSub 를 가진 flex box로 만들어야 한다. */\n\nconst TextZoneForSub = styled(TextZone)(_templateObject10());\n/* Sub Leaf의 생성시간을 담는 Div 영역 */\n\nconst CreatedDivForSub = styled.div(_templateObject11(), colors.gray_fontColor);\n/* position: absolute 태그를 대신에 크기를 차지하되, 보이지는 않는 div 태그 */\n\nconst HiddenDiv = styled.div(_templateObject12());\n/* created를 나타내는 영역이 전체 위치를 기준으로 아래에 위치하도록 하는 div 태그 */\n\nconst DivForPosition = styled.div(_templateObject13()); //////////////////////////////////////\n\n/* React Component */\n\nclass CommentItem extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isReplySee: false\n      /* subCommentList를 map함수를 통해 render하는 함수 */\n      // _renderSubComment(subCommentList) {\n\n    };\n\n    this._renderSubComment = subCommentList => {\n      return subCommentList.map((subComment, idx) => {\n        const username = subComment.username,\n              content = subComment.content,\n              created = subComment.created;\n        const isReplySee = this.state.isReplySee;\n        return React.createElement(SubCommentLeaf, {\n          isDisplay: isReplySee,\n          key: idx,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(CommentItemPhoto, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }), React.createElement(TextZoneForSub, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(CommentItemText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, username), \" \", content), React.createElement(CreatedDivForSub, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(HiddenDiv, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, created), React.createElement(DivForPosition, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, created))));\n      });\n    };\n\n    this._handleReplySee = () => {\n      // let changedValue = this.state.isReplySee ? false : true;\n      let changedValue = this.state.isReplySee ? false : true;\n      this.setState(_objectSpread({}, this.state, {\n        isReplySee: changedValue\n      }));\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          username = _this$props.username,\n          content = _this$props.content,\n          created = _this$props.created,\n          subCommentList = _this$props.subCommentList;\n    const isReplySee = this.state.isReplySee;\n    let NumOfSubComment = subCommentList.length;\n    return React.createElement(CommentStem, {\n      isReplySee: isReplySee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(CommentLeaf, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(PhotoTextItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(CommentItemPhoto, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(TextZone, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(CommentItemText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, username), \" \", content))), React.createElement(AdditionalFuncDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, created), React.createElement(ReplySeeButton, {\n      onClick: this._handleReplySee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    },\n    /* 답글 보기 상태: '답글 닫기'\n       답글 보기 아닌 상태: \n           답글이 있는 경우: 'n개의 답글 보기'\n           답글이 없는 경우: '답글 달기         */\n    isReplySee ? '답글 닫기' : NumOfSubComment ? \"\".concat(NumOfSubComment, \"\\uAC1C\\uC758 \\uB2F5\\uAE00 \\uBCF4\\uAE30\") : '답글 달기'))), NumOfSubComment ? this._renderSubComment(subCommentList) : '', React.createElement(CommentInput, {\n      isSubComment: true,\n      isReplySee: isReplySee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }));\n  }\n\n}\n/* propTypes, defaultProps */\n\n\nCommentItem.propTypes = {\n  username: PropTypes.string.isRequired,\n  // 작성자 정보\n  content: PropTypes.string.isRequired,\n  // 댓글 데이터\n  created: PropTypes.string.isRequired,\n  // 작성일 정보\n  subCommentList: PropTypes.array // 답글들의 데이터 array\n\n};\nCommentItem.defaultProps = {\n  subCommentList: []\n};\nexport default CommentItem;","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/components/BoardDetail/subcomponents/CommentItem.js"],"names":["React","Component","styled","PropTypes","CommentInput","colors","CommentStem","div","props","isReplySee","CommentLeaf","PhotoTextItem","CommentItemPhoto","white","TextZone","CommentItemText","AdditionalFuncDiv","gray_fontColor","ReplySeeButton","button","gray_bg","SubCommentLeaf","isDisplay","TextZoneForSub","CreatedDivForSub","HiddenDiv","DivForPosition","CommentItem","state","_renderSubComment","subCommentList","map","subComment","idx","username","content","created","_handleReplySee","changedValue","setState","render","NumOfSubComment","length","propTypes","string","isRequired","array","defaultProps"],"mappings":"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","sourcesContent":["// 상위 컴포넌트: components/BoardDetail/subcomponents/CommentBox.js\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport CommentInput from \"./CommentInput\";\nimport { colors } from \"../../../styles/variables\";\n\n\n/* Styled Components */\n\n/* Root Leaf + Sub Leaf \n   루트가 되는 댓글과 답글을 포함하는 div */\nconst CommentStem = styled.div`\n    margin-bottom: ${props => {\n        return props.isReplySee ? '2rem' : '1rem'\n    }};\n`;\n\n/* 댓글의 하나의 덩어리 (PhotoTextItem + AdditionalFucDiv)\n   작성자 사진, 댓글 텍스트(작성자 이름 포함), 대댓글 달기 아이콘, 시간 정보를 포함한다. */\nconst CommentLeaf = styled.div`\n   margin: 0;\n   margin-bottom: 0.5rem;\n`;\n\n/* 작성자 사진, 텍스트 데이터를 담는 div */\nconst PhotoTextItem = styled.div`\n   width: 100%;\n   margin: 0;\n   margin-bottom: 0.5rem;\n\n   display: flex;\n   flex-direction: row;\n   flex-wrap: nowrap;\n`;\n\n/* 댓글 작성자 사진 */\nexport const CommentItemPhoto = styled.div`\n   height: 2.5rem;\n   width: 2.5rem;\n   border-radius: 50%;\n   background-color: ${colors.white};\n\n   flex-basis: 2.5rem;\n`;\n\n/* 댓글이 2줄이 넘어갈 때, 텍스트 영역의 가로 길이를 알려주기 위함 */\nconst TextZone = styled.div`\n   margin-left: 0.5rem;\n   flex: 1;\n`;\n\n/* 댓글 텍스트를 담은 흰색 둥근 모서리 div 태그 */\nconst CommentItemText = styled.div`\n   border-radius: 1rem;\n   background-color: ${colors.white};\n   padding: 0.5rem 1rem;\n\n   line-height: 1.5rem;\n   font-size: 0.875rem;\n\n   display: inline-block;\n`;\n\n/* 댓글달기, 시간정보를 담은 영역 */\nconst AdditionalFuncDiv = styled.div`\n    margin: 0;\n    margin-left: 3.75rem;\n   \n    height: 1rem;\n    line-height: 1.33em;\n    font-size: 0.75rem;\n    color: ${colors.gray_fontColor};\n`;\n\n/* 답글보기 버튼 */\nconst ReplySeeButton = styled.button`\n    margin-left: 2em;\n\n    border: none;\n    outline: 0;\n    text-decoration: none;\n    background-color: ${colors.gray_bg};\n    cursor: pointer;\n`;\n\n\n/* 답글의 하나의 덩어리 (Photo + Text + 작성시간)\n   댓글과는 다르게 작성자 사진, 댓글 텍스트(작성자 이름 포함), 시간 정보를 한 라인으로 나타낸다 */\nconst SubCommentLeaf = styled.div`\n    margin-left: 3rem;\n    margin-bottom: 0.5rem;\n\n    display: ${props => {\n        return props.isDisplay ? 'flex' : 'none'\n    }};\n    flex-flow: row nowrap;\n`;\n\n/* SubComment의 경우 TextZone에 시간정보를 담은 애도 있기 때문에\n   CommentItemText + CreatedDivForSub 를 가진 flex box로 만들어야 한다. */\nconst TextZoneForSub = styled(TextZone)`\n    display: flex;\n    flex-flow: row nowrap;\n`;\n\n/* Sub Leaf의 생성시간을 담는 Div 영역 */\nconst CreatedDivForSub = styled.div`\n    position: relative;\n    height: 100%;\n    line-height: 1.33em;\n    font-size: 0.75rem;\n    color: ${colors.gray_fontColor};\n    margin-left: 0.5rem;\n    white-space: nowrap;            /* 줄바꿈을 없애는 속성 !! */\n\n    flex: 1 auto;\n`;\n\n/* position: absolute 태그를 대신에 크기를 차지하되, 보이지는 않는 div 태그 */\nconst HiddenDiv = styled.div`\n    visibility: hidden;             /* 공간은 차지하되 보이지는 않게 함 !! */\n`;\n\n/* created를 나타내는 영역이 전체 위치를 기준으로 아래에 위치하도록 하는 div 태그 */\nconst DivForPosition = styled.div`\n    position: absolute;\n    bottom: 0.5em;\n`;\n\n//////////////////////////////////////\n\n/* React Component */\n\nclass CommentItem extends Component {\n\n    // state = { isReplySee } : 답글 보기 True / False\n    state = {\n        isReplySee: false\n    }\n\n    /* subCommentList를 map함수를 통해 render하는 함수 */\n    // _renderSubComment(subCommentList) {\n    _renderSubComment = (subCommentList) => {\n        return subCommentList.map((subComment, idx) => {\n            const {\n                username,\n                content,\n                created,\n            } = subComment;\n\n            const {isReplySee} = this.state;\n\n            return (\n                <SubCommentLeaf isDisplay={isReplySee} key={idx} >\n                    <CommentItemPhoto />\n                    <TextZoneForSub>\n                        <CommentItemText><b>{username}</b> {content}</CommentItemText>\n                        <CreatedDivForSub>\n                            <HiddenDiv>{created}</HiddenDiv> \n                            <DivForPosition>{created}</DivForPosition>\n                        </CreatedDivForSub>\n                    </TextZoneForSub>\n                </SubCommentLeaf>\n            )\n        })\n    }\n\n    /* 답글 달기 또는 보기를 누르는 이벤트를 처리하는 함수 */\n    _handleReplySee = () => {\n        // let changedValue = this.state.isReplySee ? false : true;\n        let changedValue = this.state.isReplySee ? false : true;\n\n        this.setState({\n            ...this.state,\n            isReplySee: changedValue\n        })\n    }\n\n    render() {\n\n        const {\n            username,\n            content,\n            created,\n            subCommentList\n        } = this.props;\n\n        const { isReplySee } = this.state;\n\n        let NumOfSubComment = subCommentList.length;\n\n        return (\n            <CommentStem isReplySee={isReplySee} >\n                {/* 기본 댓글 */}\n                <CommentLeaf>\n                    <PhotoTextItem>\n                        <CommentItemPhoto />\n                        <TextZone>\n                            <CommentItemText><b>{username}</b> {content}</CommentItemText>\n                        </TextZone>\n                    </PhotoTextItem>\n                    <AdditionalFuncDiv>\n                        <span>{created}</span>\n                        <ReplySeeButton onClick={this._handleReplySee} >\n                            {\n                                /* 답글 보기 상태: '답글 닫기'\n                                   답글 보기 아닌 상태: \n                                       답글이 있는 경우: 'n개의 답글 보기'\n                                       답글이 없는 경우: '답글 달기         */ \n\n                                isReplySee ?\n                                '답글 닫기' :\n                                NumOfSubComment ?\n                                    `${NumOfSubComment}개의 답글 보기` :\n                                    '답글 달기'\n                            }\n                        </ReplySeeButton>\n                    </AdditionalFuncDiv>\n                </CommentLeaf>\n\n                {/* 답글들. map 함수를 이용해서 만들기 */}\n                {\n                    NumOfSubComment ?\n                    this._renderSubComment(subCommentList) :\n                    ''\n                }\n\n                {/* 답글 입력 창 */}\n                <CommentInput\n                    isSubComment={true}\n                    isReplySee={isReplySee}\n                />\n\n            </CommentStem>\n        )\n    }\n}\n\n\n/* propTypes, defaultProps */\n\nCommentItem.propTypes = {\n    username: PropTypes.string.isRequired,      // 작성자 정보\n    content: PropTypes.string.isRequired,       // 댓글 데이터\n    created: PropTypes.string.isRequired,       // 작성일 정보\n    subCommentList: PropTypes.array,            // 답글들의 데이터 array\n}\n\nCommentItem.defaultProps = {\n    subCommentList: []\n}\n\n\nexport default CommentItem;"]},"metadata":{},"sourceType":"module"}