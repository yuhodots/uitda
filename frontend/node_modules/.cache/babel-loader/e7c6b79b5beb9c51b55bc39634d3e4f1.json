{"ast":null,"code":"import axios from 'axios';\nimport { BOARD_INIT, BOARD_GET_SUCCESS, BOARD_GET_FAILURE, BOARD_SCROLL_GET, BOARD_SCROLL_GET_SUCCESS, BOARD_SCROLL_GET_FAILURE, BOARD_DETAIL_GET_SUCCESS, BOARD_DETAIL_GET_FAILURE } from \"./ActionTypes\"; // Board 초기화 액션 생성자\n\nexport function initiateBoard() {\n  return {\n    type: BOARD_INIT\n  };\n} // Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search, successAction = getBoardSuccess, failureAction = getBoardFailure) {\n  return dispatch => {\n    /* search 데이터를 정제하는 과정(함수) 필요 */\n    // GET 요청을 보낼 url\n    // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n    const GETurl = \"/api/\".concat(boardName, \"/?scroll=\").concat(scroll).concat(search ? \"&q=\".concat(search) : ''); // GETurl로 GET 요청 보내기\n\n    return axios.get(GETurl) // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n    .then(res => res.data).then(data => {\n      dispatch(successAction(search, data.postlist, data.isLast));\n    }) // 실패하면, 실패 액션을 dispatch 한다.\n    .catch(err => {\n      dispatch(failureAction(err));\n    });\n  };\n}\nexport function getBoardSuccess(search = '', postlist, isLast) {\n  return {\n    type: BOARD_GET_SUCCESS,\n    search,\n    postlist,\n    isLast\n  };\n}\nexport function getBoardFailure(err) {\n  return {\n    type: BOARD_GET_FAILURE,\n    err\n  };\n}\nexport function getBoardRequestByScroll(boardName, scroll, search) {\n  return dispatch => {\n    dispatch(getBoardByScroll());\n    setTimeout(() => {\n      dispatch(getBoardRequest(boardName, scroll, search, getBoardByScrollSuccess, getBoardByScrollFailure));\n    }, 750);\n  };\n}\nexport function getBoardByScroll() {\n  return {\n    type: BOARD_SCROLL_GET\n  };\n}\nexport function getBoardByScrollSuccess(search = '', postlist, isLast) {\n  return {\n    type: BOARD_SCROLL_GET_SUCCESS,\n    search,\n    postlist,\n    isLast\n  };\n}\nexport function getBoardByScrollFailure(err) {\n  return {\n    type: BOARD_SCROLL_GET_FAILURE,\n    err\n  };\n} //////////////////////////////////////////////////////\n// Board Detail Actions //\n\nexport function getBoardDetailRequest(boardName, id) {\n  return dispatch => {\n    // GET 요청을 보낼 url\n    // ex) '/api/market/1', '/api/network/13'\n    const GETurl = \"/api/\".concat(boardName, \"/\").concat(id); // GETurl로 GET 요청 보내기\n\n    return axios.get(GETurl) // 성공하면, post 데이터를 가져와서 성공 액션을 dispatch 하고,\n    .then(res => res.data).then(data => {\n      dispatch(getBoardDetailSuccess(data.post));\n    }) // 실패하면, 실패 액션을 dispatch 한다.\n    .catch(err => {\n      dispatch(getBoardDetailFailure(err));\n    });\n  };\n}\nexport function getBoardDetailSuccess(post) {\n  return {\n    type: BOARD_DETAIL_GET_SUCCESS,\n    post\n  };\n}\nexport function getBoardDetailFailure(err) {\n  return {\n    type: BOARD_DETAIL_GET_FAILURE,\n    err\n  };\n}","map":{"version":3,"sources":["/Users/yuho8437/Documents/GitHub/uitda/frontend/src/store/actions/board.js"],"names":["axios","BOARD_INIT","BOARD_GET_SUCCESS","BOARD_GET_FAILURE","BOARD_SCROLL_GET","BOARD_SCROLL_GET_SUCCESS","BOARD_SCROLL_GET_FAILURE","BOARD_DETAIL_GET_SUCCESS","BOARD_DETAIL_GET_FAILURE","initiateBoard","type","getBoardRequest","boardName","scroll","search","successAction","getBoardSuccess","failureAction","getBoardFailure","dispatch","GETurl","get","then","res","data","postlist","isLast","catch","err","getBoardRequestByScroll","getBoardByScroll","setTimeout","getBoardByScrollSuccess","getBoardByScrollFailure","getBoardDetailRequest","id","getBoardDetailSuccess","post","getBoardDetailFailure"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { \n    BOARD_INIT,\n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_SCROLL_GET,\n    BOARD_SCROLL_GET_SUCCESS,\n    BOARD_SCROLL_GET_FAILURE,\n    BOARD_DETAIL_GET_SUCCESS,\n    BOARD_DETAIL_GET_FAILURE\n} from \"./ActionTypes\";\n\n\n// Board 초기화 액션 생성자\nexport function initiateBoard() {\n    return {\n        type: BOARD_INIT\n    }\n}\n\n\n// Board Data GET 액션 생성자\nexport function getBoardRequest(boardName, scroll, search, successAction = getBoardSuccess, failureAction = getBoardFailure) {\n    return (dispatch) => {\n\n        /* search 데이터를 정제하는 과정(함수) 필요 */\n\n        // GET 요청을 보낼 url\n        // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n        const GETurl = `/api/${boardName}/?scroll=${scroll}${search?`&q=${search}`:''}`;    \n\n        // GETurl로 GET 요청 보내기\n        return axios.get(GETurl)\n        \n        // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n        .then(res => res.data)\n        .then(data => {\n            dispatch(successAction(search, data.postlist, data.isLast))\n        })\n        \n        // 실패하면, 실패 액션을 dispatch 한다.\n        .catch(err => {\n            dispatch(failureAction(err))\n        })\n    }\n}\n\nexport function getBoardSuccess(search = '', postlist, isLast) {\n    return {\n        type: BOARD_GET_SUCCESS,\n        search,\n        postlist,\n        isLast\n    }\n}\n\nexport function getBoardFailure(err) {\n    return {\n        type: BOARD_GET_FAILURE,\n        err\n    }\n}\n\n\nexport function getBoardRequestByScroll(boardName, scroll, search) {\n    return (dispatch) => {\n        dispatch(getBoardByScroll());\n        setTimeout(() => {\n            dispatch(getBoardRequest(boardName, scroll, search, getBoardByScrollSuccess, getBoardByScrollFailure));\n        }, 750);\n    }\n}\n\nexport function getBoardByScroll() {\n    return {\n        type: BOARD_SCROLL_GET\n    }\n}\n\nexport function getBoardByScrollSuccess(search = '', postlist, isLast) {\n    return {\n        type: BOARD_SCROLL_GET_SUCCESS,\n        search,\n        postlist,\n        isLast\n    }\n}\n\nexport function getBoardByScrollFailure(err) {\n    return {\n        type: BOARD_SCROLL_GET_FAILURE,\n        err\n    }\n}\n\n\n//////////////////////////////////////////////////////\n// Board Detail Actions //\n\nexport function getBoardDetailRequest(boardName, id) {\n    return (dispatch) => {\n        // GET 요청을 보낼 url\n        // ex) '/api/market/1', '/api/network/13'\n        const GETurl = `/api/${boardName}/${id}`;\n\n        // GETurl로 GET 요청 보내기\n        return axios.get(GETurl)\n        \n        // 성공하면, post 데이터를 가져와서 성공 액션을 dispatch 하고,\n        .then(res => res.data)\n        .then(data => {\n            dispatch(getBoardDetailSuccess(data.post))\n        })\n        \n        // 실패하면, 실패 액션을 dispatch 한다.\n        .catch(err => {\n            dispatch(getBoardDetailFailure(err))\n        })\n    }\n}\n\nexport function getBoardDetailSuccess (post) {\n    return {\n        type: BOARD_DETAIL_GET_SUCCESS,\n        post\n    }\n}\n\nexport function getBoardDetailFailure (err) {\n    return {\n        type: BOARD_DETAIL_GET_FAILURE,\n        err\n    }\n}"]},"metadata":{},"sourceType":"module"}