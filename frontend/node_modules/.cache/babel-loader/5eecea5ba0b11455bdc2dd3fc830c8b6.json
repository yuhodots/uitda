{"ast":null,"code":"import axios from 'axios';\nimport { BOARD_GET_SUCCESS, BOARD_GET_FAILURE, BOARD_INIT } from \"./ActionTypes\"; // Board 초기화 액션 생성자\n\nexport function InitateBoard() {\n  return {\n    type: BOARD_INIT\n  };\n} // Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search) {\n  return async dispatch => {\n    /* search 데이터를 정제하는 과정(함수) 필요 */\n    // GET 요청을 보낼 url\n    // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n    const GETurl = \"/api/\".concat(boardName, \"/?scroll=\").concat(scroll).concat(search ? \"&q=\".concat(search) : ''); // GETurl로 GET 요청 보내기\n\n    try {\n      const res = await axios.get(GETurl);\n      const postlist = res.data.postlist;\n      return dispatch(getBoardSuccess(search, postlist));\n    } catch (err) {\n      return dispatch(getBoardFailure(err));\n    }\n  };\n}\nexport function getBoardSuccess(search = '', postlist) {\n  return {\n    type: BOARD_GET_SUCCESS,\n    search,\n    postlist\n  };\n}\nexport function getBoardFailure(err) {\n  return {\n    type: BOARD_GET_FAILURE,\n    err\n  };\n}","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/store/actions/board.js"],"names":["axios","BOARD_GET_SUCCESS","BOARD_GET_FAILURE","BOARD_INIT","InitateBoard","type","getBoardRequest","boardName","scroll","search","dispatch","GETurl","res","get","postlist","data","getBoardSuccess","err","getBoardFailure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,UAHJ,QAIO,eAJP,C,CAOA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEF;AADH,GAAP;AAGH,C,CAGD;;AAEA,OAAO,SAASG,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;AACvD,SAAO,MAAOC,QAAP,IAAoB;AAEvB;AAEA;AACA;AACA,UAAMC,MAAM,kBAAWJ,SAAX,sBAAgCC,MAAhC,SAAyCC,MAAM,gBAAOA,MAAP,IAAgB,EAA/D,CAAZ,CANuB,CASvB;;AACA,QAAI;AACA,YAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUF,MAAV,CAAlB;AACA,YAAMG,QAAQ,GAAGF,GAAG,CAACG,IAAJ,CAASD,QAA1B;AACA,aAAOJ,QAAQ,CAACM,eAAe,CAACP,MAAD,EAASK,QAAT,CAAhB,CAAf;AACH,KAJD,CAKA,OAAOG,GAAP,EAAY;AACR,aAAOP,QAAQ,CAACQ,eAAe,CAACD,GAAD,CAAhB,CAAf;AACH;AACJ,GAlBD;AAmBH;AAED,OAAO,SAASD,eAAT,CAAyBP,MAAM,GAAG,EAAlC,EAAsCK,QAAtC,EAAgD;AACnD,SAAO;AACHT,IAAAA,IAAI,EAAEJ,iBADH;AAEHQ,IAAAA,MAFG;AAGHK,IAAAA;AAHG,GAAP;AAKH;AAED,OAAO,SAASI,eAAT,CAAyBD,GAAzB,EAA8B;AACjC,SAAO;AACHZ,IAAAA,IAAI,EAAEH,iBADH;AAEHe,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import axios from 'axios';\n\nimport { \n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_INIT,\n} from \"./ActionTypes\";\n\n\n// Board 초기화 액션 생성자\n\nexport function InitateBoard() {\n    return {\n        type: BOARD_INIT\n    }\n}\n\n\n// Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search) {\n    return async (dispatch) => {\n\n        /* search 데이터를 정제하는 과정(함수) 필요 */\n\n        // GET 요청을 보낼 url\n        // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n        const GETurl = `/api/${boardName}/?scroll=${scroll}${search?`&q=${search}`:''}`;    \n        \n\n        // GETurl로 GET 요청 보내기\n        try {\n            const res = await axios.get(GETurl);\n            const postlist = res.data.postlist;\n            return dispatch(getBoardSuccess(search, postlist));\n        }\n        catch (err) {\n            return dispatch(getBoardFailure(err));\n        }\n    }\n}\n\nexport function getBoardSuccess(search = '', postlist) {\n    return {\n        type: BOARD_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardFailure(err) {\n    return {\n        type: BOARD_GET_FAILURE,\n        err\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}