{"ast":null,"code":"import axios from 'axios';\nimport { BOARD_GET_SUCCESS, BOARD_GET_FAILURE, BOARD_INIT } from \"./ActionTypes\"; // Board 초기화 액션 생성자\n\nexport function InitateBoard() {\n  return {\n    type: BOARD_INIT\n  };\n} // Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search) {\n  return dispatch => {\n    /* search 데이터를 정제하는 과정(함수) 필요 */\n    // GET 요청을 보낼 url\n    // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n    const GETurl = \"/api/\".concat(boardName, \"/?scroll=\").concat(scroll).concat(search ? \"&q=\".concat(search) : ''); // GETurl로 GET 요청 보내기\n\n    return axios.get(GETurl) // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n    .then(res => res.data.postlist).then(postlist => dispatch(getBoardSuccess(search, postlist))) // 실패하면, 실패 액션을 dispatch 한다.\n    .catch(err => dispatch(getBoardFailure(err)));\n  };\n}\nexport function getBoardSuccess(search = '', postlist) {\n  return {\n    type: BOARD_GET_SUCCESS,\n    search,\n    postlist\n  };\n}\nexport function getBoardFailure(err) {\n  return {\n    type: BOARD_GET_FAILURE,\n    err\n  };\n}","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/store/actions/board.js"],"names":["axios","BOARD_GET_SUCCESS","BOARD_GET_FAILURE","BOARD_INIT","InitateBoard","type","getBoardRequest","boardName","scroll","search","dispatch","GETurl","get","then","res","data","postlist","getBoardSuccess","catch","err","getBoardFailure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,UAHJ,QAIO,eAJP,C,CAOA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEF;AADH,GAAP;AAGH,C,CAGD;;AAEA,OAAO,SAASG,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,MAA5C,EAAoD;AACvD,SAAQC,QAAD,IAAc;AAEjB;AAEA;AACA;AACA,UAAMC,MAAM,kBAAWJ,SAAX,sBAAgCC,MAAhC,SAAyCC,MAAM,gBAAOA,MAAP,IAAgB,EAA/D,CAAZ,CANiB,CASjB;;AACA,WAAOT,KAAK,CAACY,GAAN,CAAUD,MAAV,EAEP;AAFO,KAGNE,IAHM,CAGDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASC,QAHf,EAINH,IAJM,CAIDG,QAAQ,IAAIN,QAAQ,CAACO,eAAe,CAACR,MAAD,EAASO,QAAT,CAAhB,CAJnB,EAMP;AANO,KAONE,KAPM,CAOAC,GAAG,IAAIT,QAAQ,CAACU,eAAe,CAACD,GAAD,CAAhB,CAPf,CAAP;AAQH,GAlBD;AAmBH;AAED,OAAO,SAASF,eAAT,CAAyBR,MAAM,GAAG,EAAlC,EAAsCO,QAAtC,EAAgD;AACnD,SAAO;AACHX,IAAAA,IAAI,EAAEJ,iBADH;AAEHQ,IAAAA,MAFG;AAGHO,IAAAA;AAHG,GAAP;AAKH;AAED,OAAO,SAASI,eAAT,CAAyBD,GAAzB,EAA8B;AACjC,SAAO;AACHd,IAAAA,IAAI,EAAEH,iBADH;AAEHiB,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import axios from 'axios';\n\nimport { \n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_INIT,\n} from \"./ActionTypes\";\n\n\n// Board 초기화 액션 생성자\n\nexport function InitateBoard() {\n    return {\n        type: BOARD_INIT\n    }\n}\n\n\n// Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search) {\n    return (dispatch) => {\n\n        /* search 데이터를 정제하는 과정(함수) 필요 */\n\n        // GET 요청을 보낼 url\n        // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n        const GETurl = `/api/${boardName}/?scroll=${scroll}${search?`&q=${search}`:''}`;    \n        \n\n        // GETurl로 GET 요청 보내기\n        return axios.get(GETurl)\n        \n        // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n        .then(res => res.data.postlist)\n        .then(postlist => dispatch(getBoardSuccess(search, postlist)))\n        \n        // 실패하면, 실패 액션을 dispatch 한다.\n        .catch(err => dispatch(getBoardFailure(err)))\n    }\n}\n\nexport function getBoardSuccess(search = '', postlist) {\n    return {\n        type: BOARD_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardFailure(err) {\n    return {\n        type: BOARD_GET_FAILURE,\n        err\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}