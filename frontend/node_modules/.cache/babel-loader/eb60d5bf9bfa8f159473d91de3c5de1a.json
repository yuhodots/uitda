{"ast":null,"code":"var _jsxFileName = \"/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js\";\n//\n// 상위 컴포넌트: pages/Board\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux'; // 컴포넌트\n\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\"; // 액션\n\nimport { headerOn, headerOff, searchBarOn } from \"../store/actions/structure\";\nimport { InitateBoard, getBoardRequest } from '../store/actions/board';\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isGetSuccess: false\n    };\n\n    this.onScroll = e => {\n      this.props.headerOff();\n\n      if (document.documentElement.scrollTop <= 64) {\n        this.props.headerOn();\n      }\n    };\n\n    this._getBoardRequest = (boardName, scroll, search) => {\n      this.props.getBoardRequest(boardName, scroll, search);\n      this.setState({\n        isGetSuccess: this.props.isGetSuccess\n      });\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          boardName = _this$props.boardName,\n          scroll = _this$props.scroll,\n          search = _this$props.search;\n    this.props.headerOn(); // 헤더 On\n\n    this.props.searchBarOn(); // 검색창 On\n\n    this.props.topicSelect(boardName); // app의 topic state를 boardName으로 설정\n\n    this.props.InitateBoard(); // Board 초기화\n    //this.props.getBoardRequest(boardName, scroll, search);  // Board 데이터 GET 요청\n\n    this._getBoardRequest(boardName, scroll, search);\n\n    window.addEventListener('scroll', this.onScroll); // Scroll 이벤트가 생길 때, onScroll을 실행함\n  }\n\n  componentWillReceiveProps() {\n    console.log('hi');\n    console.log(this.props);\n  }\n\n  render() {\n    let _this$props2 = this.props,\n        boardName = _this$props2.boardName,\n        postlist = _this$props2.postlist,\n        search = _this$props2.search,\n        isHeaderOn = _this$props2.isHeaderOn,\n        isGetSuccess = _this$props2.isGetSuccess,\n        headerOn = _this$props2.headerOn;\n    console.log(\"render \".concat(isGetSuccess));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, isGetSuccess ? React.createElement(Board, {\n      boardName: boardName,\n      postlist: postlist,\n      search: search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"PageError\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"'\\uC0C8\\uB85C\\uACE0\\uCE68\\uC744 \\uB20C\\uB7EC\\uC8FC\\uC138\\uC694 :)'\"), React.createElement(SearchIcon, {\n      isHeaderOn: isHeaderOn,\n      headerOn: headerOn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isGetSuccess: state.board.isGetSuccess,\n    // GET 요청이 성공했는 지 여부\n    postlist: state.board.postlist,\n    // postlist 데이터\n    scroll: state.board.scroll,\n    // 스크롤 횟수 (데이터를 받은 횟수)\n    search: state.board.search,\n    // 검색어 데이터\n    isHeaderOn: state.structure.isHeaderOn // 헤더가 On 인지\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    headerOn: () => {\n      dispatch(headerOn());\n    },\n    // 헤더를 나타나게 하는 메서드\n    headerOff: () => {\n      dispatch(headerOff());\n    },\n    // 헤더를 사라지게 하는 메서드\n    searchBarOn: () => {\n      dispatch(searchBarOn());\n    },\n    // 검색바를 나타나게 하는 메서드\n    InitateBoard: () => {\n      dispatch(InitateBoard());\n    },\n    // 보드 초기화 메서드 \n    getBoardRequest: (boardName, scroll, search) => {\n      // 보드 GET 요청 메서드\n      dispatch(getBoardRequest(boardName, scroll, search));\n    },\n    topicSelect: topic => {\n      dispatch(topicSelect(topic));\n    } // App의 topic state를 topic 값으로 설정\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);","map":{"version":3,"sources":["/Users/soogeun/Documents/GitHub/Uitda-Soogeun-WorkSpace/frontend/src/containers/BoardContainer.js"],"names":["React","Component","connect","Board","SearchIcon","headerOn","headerOff","searchBarOn","InitateBoard","getBoardRequest","topicSelect","BoardContainer","state","isGetSuccess","onScroll","e","props","document","documentElement","scrollTop","_getBoardRequest","boardName","scroll","search","setState","componentDidMount","window","addEventListener","componentWillReceiveProps","console","log","render","postlist","isHeaderOn","mapStateToProps","board","structure","mapDispatchToProps","dispatch","topic"],"mappings":"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","sourcesContent":["//\n\n// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    headerOn,\n    headerOff,\n    searchBarOn,\n} from \"../store/actions/structure\"\n\nimport { \n    InitateBoard,\n    getBoardRequest\n} from '../store/actions/board'\n\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {    \n\n    state = {\n        isGetSuccess: false\n    }\n\n    componentDidMount() {\n        const { boardName, scroll, search } = this.props;\n\n        this.props.headerOn();                                  // 헤더 On\n        this.props.searchBarOn();                               // 검색창 On\n        this.props.topicSelect(boardName);                      // app의 topic state를 boardName으로 설정\n\n        this.props.InitateBoard();                              // Board 초기화\n        //this.props.getBoardRequest(boardName, scroll, search);  // Board 데이터 GET 요청\n\n        this._getBoardRequest(boardName, scroll, search);\n\n        window.addEventListener('scroll', this.onScroll);       // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    onScroll = (e) => {\n        this.props.headerOff();\n        if(document.documentElement.scrollTop <= 64){\n            this.props.headerOn();\n        }\n    }\n\n    _getBoardRequest = (boardName, scroll, search) => {\n        this.props.getBoardRequest(boardName, scroll, search);\n        this.setState({\n            isGetSuccess: this.props.isGetSuccess\n        })\n    }\n\n    componentWillReceiveProps() {\n        console.log('hi')\n        console.log(this.props)\n    }\n\n    render() {\n\n        let {\n            // properties\n            boardName,\n            postlist,\n            search,\n            isHeaderOn,\n            isGetSuccess,\n\n            // methods\n            headerOn\n        } = this.props;\n\n        console.log(`render ${isGetSuccess}`);\n\n        return (\n            <div>\n                {\n                    isGetSuccess ?\n                \n                    <Board\n                        boardName={boardName} \n                        postlist={postlist} \n                        search={search}\n                    /> :\n                    <div className='PageError'>\n                        '새로고침을 눌러주세요 :)'\n                    </div>\n                }              \n                <SearchIcon\n                    isHeaderOn={isHeaderOn}\n                    headerOn={headerOn}\n                />  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,     // GET 요청이 성공했는 지 여부\n        postlist: state.board.postlist,             // postlist 데이터\n        scroll: state.board.scroll,                 // 스크롤 횟수 (데이터를 받은 횟수)\n        search: state.board.search,                 // 검색어 데이터\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더가 On 인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타나게 하는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색바를 나타나게 하는 메서드\n\n        InitateBoard: () => {dispatch(InitateBoard())},             // 보드 초기화 메서드 \n        getBoardRequest: (boardName, scroll, search) => {           // 보드 GET 요청 메서드\n            dispatch(getBoardRequest(boardName, scroll, search))\n        },\n\n        topicSelect: (topic) => {dispatch(topicSelect(topic))},     // App의 topic state를 topic 값으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);"]},"metadata":{},"sourceType":"module"}