{"version":3,"sources":["components/Board/PostCard/Cards/user-basic.png","components/Structure/SideBar/logo-color.png","components/Structure/Header/logo-white.png","serviceWorker.js","store/actions/ActionTypes.js","store/actions/structure.js","store/actions/topic.js","containers/HomeContainer.js","pages/Home.js","pages/NotFound.js","components/Login/LoginForm/LoginForm.js","store/actions/auth.js","containers/LoginContainer.js","components/Register/RegisterForm/RegisterForm.js","containers/RegisterContainer.js","pages/Auth.js","components/Board/PostCard/Cards/ContentBox.js","components/Board/PostCard/Cards/BasicCard.js","components/Board/PostCard/Cards/FakeCard.js","components/Board/PostCard/PostCard.js","components/Board/Board.js","components/Structure/SearchIcon/SearchIcon.js","store/actions/board.js","containers/BoardContainer.js","containers/MarketDetailContainer.js","pages/Board.js","components/Carpool/Carpool.js","containers/CarpoolContainer.js","pages/Carpool.js","components/Structure/SideBar/Menu/Menu.js","components/Structure/SideBar/SideBar.js","containers/SideBarContainer.js","components/Structure/Header/SearchBar/SearchBar.js","components/Structure/Header/Header.js","containers/HeaderContainer.js","components/App.js","store/reducers/auth.js","store/reducers/board.js","store/reducers/structure.js","store/reducers/topic.js","store/reducers/index.js","Root.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","AUTH_GET_STATUS_SUCCESS","AUTH_GET_STATUS_FAILURE","AUTH_REGISTER_SUCCESS","AUTH_REGISTER_FAILURE","AUTH_LOGIN_FAILURE","AUTH_LOGIN_SUCCESS","AUTH_LOGOUT","BOARD_INIT","BOARD_GET_SUCCESS","BOARD_GET_FAILURE","BOARD_SCROLL_GET","BOARD_SCROLL_GET_SUCCESS","BOARD_SCROLL_GET_FAILURE","STRUCTURE_SEARCH_BAR_ON","STRUCTURE_SEARCH_BAR_OFF","STRUCTURE_HEADER_ON","STRUCTURE_HEADER_OFF","STRUCTURE_CATEGORY_ON","STRUCTURE_CATEGORY_OFF","TOPIC_HOME","TOPIC_MARKET","TOPIC_CARPOOL","TOPIC_NETWORK","searchBarOff","type","headerOn","categoryOff","HOME","MARKET","CARPOOL","NETWORK","HomeContainer","this","props","topicHome","Component","connect","state","dispatch","Home","NotFound","to","LoginForm","id","password","_handleInput","e","nextState","target","name","value","setState","_handleClick","postLoginData","onChange","onClick","getStatusRequest","axios","get","then","res","data","user","userInfo","registerRequest","username","post","console","log","catch","err","loginRequest","logoutRequest","LoginContainer","_renderLogin","isLoggedIn","auth","RegisterForm","postRegister","isSuccess","prop","postLogin","RegisterContainer","_renderRegister","registerSuccess","Auth","params","kind","ContentBox","title","created","description","className","src","userPhoto","alt","PhotoBox","filelist","BasicCard","FakeCard","PostCard","condition","price","isFake","_renderCard","defaultProps","Board","_makeStandardList","postlist","standardList","fakeCard","remain","length","fakeCardNum","map","push","_renderMarketPostList","idx","key","_renderNetworkingPostList","renderPostList","boardName","search","SearchIcon","isHeaderOn","getBoardRequest","scroll","successAction","getBoardSuccess","failureAction","getBoardFailure","GETurl","getBoardRequestByScroll","setTimeout","getBoardByScrollSuccess","getBoardByScrollFailure","BoardContainer","_initBoard","a","initiateBoard","_handleScroll","scrollHeight","Math","max","document","documentElement","body","scrollTop","clientHeight","headerOff","isLoading","searchBarOn","topicSelect","addEventListener","removeEventListener","isGetSuccess","board","structure","topic","MarketDetailContainer","exact","path","render","component","Carpool","CarpoolContainer","topicCarpool","Menu","selectedTopic","topicData","i","url","isActive","MenuItem","SideBar","logo","upper","below","SideBarContainer","SearchBar","keyword","Header","isSearchBarOn","handleLogout","href","isCategoryOn","HeaderContainer","getStatus","App","initialState","loginSuccess","registerError","InitialState","reducers","combineReducers","action","store","createStore","reducer","applyMiddleware","thunk","Root","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ab12145.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user-basic.9698f7f4.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-color.3ff723db.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-white.ca985d89.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n// AUTH Action Types\n\nexport const AUTH_GET_STATUS_SUCCESS = \"AUTH_GET_STATUS_SUCCESS\";\nexport const AUTH_GET_STATUS_FAILURE = \"AUTH_GET_STATUS_FAILURE\";\n\nexport const AUTH_REGISTER_SUCCESS = 'AUTR_RIGISTER_SUCCESS';\nexport const AUTH_REGISTER_FAILURE = 'AUTR_RIGISTER_FAILURE';\n\nexport const AUTH_LOGIN_FAILURE = 'AUTR_LOGIN_FAILURE';\nexport const AUTH_LOGIN_SUCCESS = 'AUTR_LOGIN_SUCCESS';\n\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n\n\n// BOARD Action Types\n\nexport const BOARD_INIT = \"BOARD_INIT\";\n\nexport const BOARD_GET_SUCCESS = \"BOARD_GET_SUCCESS\";\nexport const BOARD_GET_FAILURE = \"BOARD_GET_FAILURE\";\n\nexport const BOARD_SCROLL_GET = \"BOARD_SCROLL_GET\";\nexport const BOARD_SCROLL_GET_SUCCESS = \"BOARD_SCROLL_GET_SUCCESS\";\nexport const BOARD_SCROLL_GET_FAILURE = \"BOARD_SCROLL_GET_FAILURE\";\n\n// STRUCTURE Action Types\n\nexport const STRUCTURE_SEARCH_BAR_ON = \"STRUCTURE_SEARCH_BAR_ON\";\nexport const STRUCTURE_SEARCH_BAR_OFF = \"STRUCTURE_SEARCH_BAR_OFF\";\n\nexport const STRUCTURE_HEADER_ON = \"STRUCTURE_HEADER_ON\";\nexport const STRUCTURE_HEADER_OFF = \"STRUCTURE_HEADER_OFF\";\n\nexport const STRUCTURE_CATEGORY_ON = \"STRUCTURE_CATEGORY_ON\";\nexport const STRUCTURE_CATEGORY_OFF = \"STRUCTURE_CATEGORY_OFF\";\n\n\n// TOPIC Action Types\n\nexport const TOPIC_HOME = 'TOPIC_HOME';\nexport const TOPIC_MARKET = \"TOPIC_MARKET\";\nexport const TOPIC_CARPOOL = 'TOPIC_CARPOOL';\nexport const TOPIC_NETWORK = \"TOPIC_NETWORK\";","import { \n    STRUCTURE_SEARCH_BAR_ON,\n    STRUCTURE_SEARCH_BAR_OFF,\n    STRUCTURE_HEADER_ON,\n    STRUCTURE_HEADER_OFF,\n    STRUCTURE_CATEGORY_ON,\n    STRUCTURE_CATEGORY_OFF\n } from \"./ActionTypes\";\n\n\n// Search Bar 온 오프 액션 생성자\n\nexport function searchBarOn() {\n    return {\n        type: STRUCTURE_SEARCH_BAR_ON\n    }\n}\n\nexport function searchBarOff() {\n    return {\n        type: STRUCTURE_SEARCH_BAR_OFF\n    }\n}\n\n\n// Header 온 오프 액션 생성자\n\nexport function headerOn() {\n    return {\n        type: STRUCTURE_HEADER_ON\n    }\n}\n\nexport function headerOff() {\n    return {\n        type: STRUCTURE_HEADER_OFF\n    }\n}\n\n\n// Category 온 오프 액션 생성자\n\nexport function categoryOn() {\n    return {\n        type: STRUCTURE_CATEGORY_ON\n    }\n}\n\nexport function categoryOff() {\n    return {\n        type: STRUCTURE_CATEGORY_OFF\n    }\n}","import { \n    TOPIC_HOME,\n    TOPIC_MARKET,\n    TOPIC_CARPOOL,\n    TOPIC_NETWORK\n} from \"./ActionTypes\";\n\n\nexport const HOME = 'home';\nexport const MARKET = 'market';\nexport const CARPOOL = 'carpool';\nexport const NETWORK = 'networking';\n\n\nexport function topicSelect(topic) {\n    switch (topic) {\n        case HOME:\n            return {\n                type: TOPIC_HOME\n            }\n        \n        case MARKET:\n            return {\n                type: TOPIC_MARKET\n            }\n\n        case CARPOOL:\n            return {\n                type: TOPIC_CARPOOL\n            }\n    \n        case NETWORK:\n            return {\n                type: TOPIC_NETWORK\n            }\n\n        default:\n            return\n    }\n}\n\nexport function topicHome() {\n    return {\n        type: TOPIC_HOME\n    }\n}\n\nexport function topicMarket() {\n    return {\n        type: TOPIC_MARKET\n    }\n}\n\nexport function topicCarpool() {\n    return {\n        type: TOPIC_CARPOOL\n    }\n}\n\nexport function topicNetwork() {\n    return {\n        type: TOPIC_NETWORK\n    }\n}\n","// 홈 화면에 대한 액션이 담긴 컨테이너\n\n// 상위 컴포넌트: pages/Home\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nimport { \n    headerOn,\n    searchBarOff,\n    categoryOff\n } from \"../store/actions/structure\";\n \n import { topicHome } from \"../store/actions/topic\";\n\nclass HomeContainer extends Component {    \n\n    componentDidMount() {\n        this.props.headerOn();\n        this.props.searchBarOff();\n        this.props.categoryOff();\n        this.props.topicHome();\n    }\n\n    render() {\n        return (\n            <div>\n                Home\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn : () => {dispatch(headerOn())},            // Header가 나타나게 하는 메서드\n        searchBarOff : () => {dispatch(searchBarOff())},    // Header에 검색바가 안 나오게 하는 메서드\n        categoryOff : () => {dispatch(categoryOff())},      // Header에 카테고리 창이 안 나오게 하는 메서드\n\n        topicHome : () => {dispatch(topicHome())},          // App의 topic state를 HOME으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContainer);","import React from \"react\";\n\nimport HomeContainer from \"../containers/HomeContainer\";\n\nconst Home = () => {\n    return (\n        <HomeContainer/>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <div>\n            <h2>Page Not Found.</h2>\n            <p>잘못된 url 접근입니다.</p>\n            <br/><br/>\n            <Link to='/'>홈으로</Link>\n        </div>\n    )\n}\n\nexport default NotFound;","import React, { Component } from \"react\";\nimport './LoginForm.css';\n\nclass LoginForm extends Component {\n\n    state = {\n        id: '',\n        password: ''\n    }\n\n    _handleInput = (e) => {\n        let nextState = {};\n        nextState[e.target.name] = e.target.value;\n        this.setState(nextState)\n    }\n\n    _handleClick = () => {\n        this.props.postLoginData(\n            this.state.id,\n            this.state.password\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>로그인 페이지</h2>\n                <p>\n                    아이디\n                    <input \n                        type='text' \n                        name='id'\n                        onChange={this._handleInput}>\n                    </input>\n                </p>\n                \n                <p>\n                    비밀번호 \n                    <input \n                        type='password' \n                        name='password'\n                        onChange={this._handleInput}>\n                    </input>\n                </p>\n                \n                <button onClick={this._handleClick}>로그인</button>\n            </div>\n        )\n    }\n}\n\nexport default LoginForm","import axios from 'axios';\n\nimport {\n    AUTH_GET_STATUS_SUCCESS,\n    AUTH_GET_STATUS_FAILURE,\n    AUTH_REGISTER_SUCCESS,\n    AUTH_REGISTER_FAILURE,\n    AUTH_LOGIN_SUCCESS,\n    AUTH_LOGIN_FAILURE,\n    AUTH_LOGOUT\n} from \"./ActionTypes\";\n\n\n// User 상태 정보 액션 생성자\n\nexport function getStatusRequest() {\n    return (dispatch) => {\n        return axios.get('/api')\n        .then(res => res.data.user)\n        .then(user => {\n            if (user) {\n                dispatch(getStatusSuccess(user));\n            }\n            else {\n                dispatch(getStatusFailure());\n            }\n        })\n    }\n}\n\nexport function getStatusSuccess(userInfo) {\n    return {\n        type: AUTH_GET_STATUS_SUCCESS,\n        userInfo\n    }\n}\n\nexport function getStatusFailure() {\n    return {\n        type: AUTH_GET_STATUS_FAILURE\n    }\n}\n\n\n// 회원가입 액션 생성자\n\nexport function registerRequest(username, password) {\n\n    return (dispatch) => {\n        return axios.post('/login/register', {\n            username, password\n        })\n        .then(res => {\n            console.log(res);\n            dispatch(registerSuccess())\n        })\n        .catch(err => {\n            console.log(err);\n            dispatch(registerFailure())\n        })\n    }\n}\n\nexport function registerSuccess() {\n    return {\n        type: AUTH_REGISTER_SUCCESS\n    }\n}\n\nexport function registerFailure() {\n    return {\n        type: AUTH_REGISTER_FAILURE\n    }\n}\n\n\n// 로그인 액션 생성자\n\nexport function loginRequest(username, password) {\n    return (dispatch) => {\n        return axios.post('/login', {\n            username, password\n        })\n        .then(res => {\n            return res.data.user})\n        .then(user => dispatch(loginSuccess(user)))\n        .catch(res => dispatch(loginFailure()))\n    }\n}\n\nexport function loginSuccess(userInfo) {\n    return {\n        type: AUTH_LOGIN_SUCCESS,\n        userInfo\n    }\n}\n\nexport function loginFailure() {\n    return {\n        type: AUTH_LOGIN_FAILURE\n    }\n}\n\n// 로그아웃 액션 생성자\n\nexport function logoutRequest() {\n    return (dispatch) => {\n        return axios.post('/logout')\n        .then((res) => {\n            dispatch(logout());\n        });\n    };\n}\n\nexport function logout() {\n    return {\n        type: AUTH_LOGOUT\n    };\n}","import React, { Component } from \"react\";\nimport { Redirect, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport LoginForm from \"../components/Login/LoginForm\";\nimport { \n    getStatusRequest,\n    loginRequest \n} from \"../store/actions/auth\";\n\nclass LoginContainer extends Component {\n\n    componentDidMount() {\n        this.props.getStatusRequest();\n    }\n\n    _renderLogin = () => {\n        return (\n            <div>\n                <LoginForm postLoginData={this.props.loginRequest}/>\n                <Link to=\"/auth/register\">회원가입</Link>\n            </div>\n            \n        )\n    }\n\n    render() {\n\n        return(\n            <div>\n                {\n                    this.props.isLoggedIn ?\n                    <Redirect to='/'/> :\n                    this._renderLogin()\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggedIn: state.auth.isLoggedIn,\n        userInfo: state.auth.userInfo\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {dispatch(getStatusRequest())},\n        loginRequest: (username, password) => {\n            dispatch(loginRequest(username, password))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","import React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport './RegisterForm.css';\n\nclass RegisterForm extends Component {\n\n    state = {\n        id: '',\n        password: ''\n    }\n\n    _handleInput = (e) => {\n        let nextState = {};\n        nextState[e.target.name] = e.target.value;\n        this.setState(nextState)\n    }\n\n    _handleClick =  () => {\n        this.props.postRegister(\n            this.state.id,\n            this.state.password\n        );\n\n        if (this.props.isSuccess) {\n            this.prop.postLogin(\n                this.state.id,\n                this.state.password\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n\n                {this.props.isSuccess && <Redirect to='/'/>}\n\n                <h2>회원가입 페이지</h2>\n                <p>\n                    아이디\n                    <input \n                        type='text' \n                        name='id'\n                        onChange={this._handleInput}>\n                    </input>\n                </p>\n                \n                <p>\n                    비밀번호 \n                    <input \n                        type='password' \n                        name='password'\n                        onChange={this._handleInput}>\n                    </input>\n                </p>\n                \n                <button onClick={this._handleClick}>회원가입</button>\n            </div>\n        )\n    }\n}\n\nexport default RegisterForm","import React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport RegisterForm from \"../components/Register/RegisterForm\";\nimport { \n    getStatusRequest,\n    registerRequest,\n    loginRequest\n} from \"../store/actions/auth\";\n\nclass RegisterContainer extends Component {\n\n    componentDidMount() {\n        this.props.getStatusRequest();\n    }\n\n    _renderRegister = () => {\n        return (\n            <RegisterForm \n                postRegister={this.props.registerRequest}\n                postLogin={this.props.loginRequest}\n                isSuccess={this.props.isSuccess}    \n            />\n        )\n    }\n\n    render() {\n        return(\n            <div>\n                {\n                    this.props.isLoggedIn ?\n                    <Redirect to='/'/> :\n                    this._renderRegister()\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggedIn: state.auth.isLoggedIn,\n        userInfo: state.auth.userInfo,\n        isSuccess: state.auth.registerSuccess\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {dispatch(getStatusRequest())},\n        registerRequest: (username, password) => {dispatch(registerRequest(username, password))},\n        loginRequest: (username, password) => {dispatch(loginRequest(username, password))}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterContainer);","import React from \"react\";\n\nimport LoginContainer from \"../containers/LoginContainer\";\nimport RegisterContainer from \"../containers/RegisterContainer\";\nimport NotFound from './NotFound';\n\nconst Auth = ({match}) => {\n\n    switch (match.params.kind) {\n        case 'login':\n            return (\n                <LoginContainer/>\n            )\n    \n        case 'register':\n            return (\n                <RegisterContainer/>\n            )\n\n        default:\n            return (\n                <NotFound/>\n            )\n    }\n}\n\nexport default Auth;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport userPhoto from \"./user-basic.png\";\n\nconst ContentBox = ({id, title, username, created, description}) => {\n\n    return (\n        <div className='ContentBox'>\n            <div className='ContentHead'>\n                <div className=\"InfoBox\">\n                    <div className='user-photo'><img src={userPhoto} className=\"Photo\" alt=\"\" /></div>\n                    <div className='Infomations'>\n                        <div className='username'>{username}</div>\n                        <div className='created'>{created}</div>\n                        <div className='sell-status'>판매상태</div>\n                    </div>\n                </div>\n\n                <h3>\n                    <Link to=\"/\" className=\"PostTitle\">{title}</Link>\n                </h3>\n\n                <h4>\n                    10,000 원\n                </h4>\n\n            </div>\n            <div className=\"description\">\n                {description}\n            </div>\n        </div>\n    )\n}\n\nexport default ContentBox;","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nimport ContentBox from \"./ContentBox\";\n\nconst BasicCard = ({id, title, user, created, description, filelist}) => {\n    return (\n        <div className=\"Basic\">\n            <PhotoBox filelist={filelist}/>\n            <ContentBox\n                id = {id}\n                title = {title}\n                username = {user.username}\n                created = {created}\n                description = {description}\n            />\n        </div>\n    )\n}\n\nconst PhotoBox = ({filelist}) => {\n    return (\n        <Link to='/' className=\"photo-wrapper\">\n            {\n                filelist[0] ?\n                <img src={filelist[0].location} className='Photo' alt=\"\" /> :\n                ''\n            }\n            \n            <div className='white-mask'></div>\n        </Link>\n    )\n}\n\nexport default BasicCard;","import React from \"react\";\n\nconst FakeCard = () => {\n    return (\n        <div className='FakeCard'>\n            착한 사람한테만 보이는 카드입니다 :)<br/>\n            다음 학기 올 A+ 받게 해주세요\n        </div>\n    )\n}\n\nexport default FakeCard;","//\n\n// 상위 컴포넌트: components/Board\n\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport { BasicCard, FakeCard } from \"./Cards\";\nimport './PostCard.css';\n\nclass PostCard extends Component {\n\n    _renderCard() {\n        return (\n            <BasicCard\n                id = {this.props.id}\n                title = {this.props.title}\n                user = {this.props.user}\n                created = {this.props.created}\n                description = {this.props.description}\n                condition = {this.props.condition}\n                filelist = {this.props.filelist}\n\n                price = {this.props.price}\n            />\n        )\n    }\n\n    render() {\n\n        return (\n            <div className=\"PostCard\">\n                {\n                    this.props.isFake ?\n                    <FakeCard/> :\n                    this._renderCard()\n                }\n            </div>\n        )\n    }\n}\n\nPostCard.propTypes = {\n    id: PropTypes.number.isRequired,        // 포스팅 카드가 DB에 저장된 id\n    title: PropTypes.string.isRequired,     // 제목\n    user: PropTypes.object.isRequired,      // 작성자 정보 객체\n    created: PropTypes.string.isRequired,   // 작성일 정보\n    condition: PropTypes.string,            // 게시글의 상태 정보 (판매 중, 거래 완료 ...)\n    description: PropTypes.string,          // 상세 정보\n    filelist: PropTypes.array,              // 사진 데이터 리스트\n    isFake: PropTypes.bool.isRequired,      // fake 카드인지\n\n    price: PropTypes.string,                // [market] 가격 정보\n}\n\nPostCard.defaultProps = {\n    description: '',\n    filelist: [],\n    price: '',\n    condition: ''\n}\n\n\nexport default PostCard","// \n\n// 상위 컴포넌트: BoardContainer\n\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport './Board.css';\nimport PostCard from \"./PostCard\";\n\nclass Board extends Component {\n\n    _makeStandardList = (postlist) => {\n        // Postlist의 Post 개수를 3의 배수에 맞도록\n        // Fakecard를 추가해 주는 함수\n        // 반응형 기능을 아직 구현 안함\n\n        let standardList = [];\n\n        const fakeCard = {\n            id : -1,\n            title : '',\n            user : {},\n            created : '',\n            description : '',\n            filelist : [],\n            condition : '',\n            price : '',\n            isFake: true\n        };\n\n        const cardNum = postlist.length;\n        const remain = cardNum % 3;\n        let fakeCardNum = remain ? 3 - remain : 0;\n\n        standardList = postlist.map(post => {\n            return {\n                ...post,\n                isFake: false\n            }\n        })\n\n        while(fakeCardNum--){\n            standardList.push(fakeCard)\n        }\n\n        return standardList;\n    }\n\n\n    _renderMarketPostList = (postlist) => {\n        return postlist.map( (post, idx) => {\n            return (\n                <PostCard\n                    id = {post.id}\n                    title = {post.title}\n                    user = {post.user}\n                    created = {post.created}\n                    description = {post.description}\n                    filelist = {post.filelist}\n                    condition = {post.condition}\n                    price = {post.price}\n                    isFake = {post.isFake}\n                    key = {idx}\n                />\n            )\n        })\n    }\n\n    _renderNetworkingPostList = (postlist) => {\n        return postlist.map( (post, idx) => {\n            return (\n                <PostCard\n                    id = {post.id}\n                    title = {post.title}\n                    user = {post.user}\n                    created = {post.created}\n                    description = {post.description}\n                    filelist = {post.filelist}\n                    condition= {post.condition}\n                    isFake = {post.isFake}\n                    key = {idx}\n                />\n            )\n        })\n    }\n\n\n    render() {\n        const postlist = this._makeStandardList(this.props.postlist);\n        let renderPostList;\n\n        switch (this.props.boardName) {\n            case 'market':\n                renderPostList = this._renderMarketPostList;\n                break;\n        \n            case 'networking':\n                renderPostList = this._renderNetworkingPostList;\n                break;\n\n            default:\n                break;\n        }\n\n        return (\n            <div className=\"BoardTemplate\">\n                {\n                    this.props.search ?\n                    <div className='SearchInfoBox'>\n                        <h2>{this.props.search} 검색</h2>\n                    </div> :\n                    ''\n                }\n                {renderPostList(postlist)}\n            </div>\n        )\n    }\n}\n\n\nBoard.propTypes = {\n    boardName: PropTypes.string.isRequired,     // 무슨 보드인지 (market, networking)\n    postlist: PropTypes.array,                  // 렌더할 Post List 데이터\n    search: PropTypes.string,                   // 검색어 데이터\n}\n\nBoard.defaultProps = {\n    postlist: [],\n    search: ''\n}\n\n\nexport default Board;","// \n\n// 상위 컴포넌트: MarketContainer, NetworkContainer\n\nimport React from \"react\";\n\nimport './SearchIcon.css';\n\nconst SearchIcon = ({isHeaderOn, headerOn}) => {\n    return (\n        <div \n            className={\n                isHeaderOn ?\n                \"SearchIcon hidden\" :\n                \"SearchIcon\"\n            }\n\n            onClick={headerOn}>\n            검색\n        </div>\n    )\n}\n\nexport default SearchIcon;","import axios from 'axios';\n\nimport { \n    BOARD_INIT,\n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_SCROLL_GET,\n    BOARD_SCROLL_GET_SUCCESS,\n    BOARD_SCROLL_GET_FAILURE\n} from \"./ActionTypes\";\n\n\n// Board 초기화 액션 생성자\n\nexport function initiateBoard() {\n    return {\n        type: BOARD_INIT\n    }\n}\n\n\n// Board Data GET 액션 생성자\n\nexport function getBoardRequest(boardName, scroll, search, successAction = getBoardSuccess, failureAction = getBoardFailure) {\n    return (dispatch) => {\n\n        /* search 데이터를 정제하는 과정(함수) 필요 */\n\n        // GET 요청을 보낼 url\n        // ex) '/api/market/?scroll=1', '/api/network/?scroll=2&q=전공책'\n        const GETurl = `/api/${boardName}/?scroll=${scroll}${search?`&q=${search}`:''}`;    \n        console.log(GETurl)\n\n        // GETurl로 GET 요청 보내기\n        return axios.get(GETurl)\n        \n        // 성공하면, postlist 데이터를 가져와서 성공 액션을 dispatch 하고,\n        .then(res => res.data.postlist)\n        .then(postlist => {\n            console.log(postlist)\n            dispatch(successAction(search, postlist))\n        })\n        \n        // 실패하면, 실패 액션을 dispatch 한다.\n        .catch(err => {\n            dispatch(failureAction(err))\n        })\n    }\n}\n\nexport function getBoardSuccess(search = '', postlist) {\n    return {\n        type: BOARD_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardFailure(err) {\n    return {\n        type: BOARD_GET_FAILURE,\n        err\n    }\n}\n\n\nexport function getBoardRequestByScroll(boardName, scroll, search) {\n    return (dispatch) => {\n        dispatch(getBoardByScroll());\n        setTimeout(() => {\n            dispatch(getBoardRequest(boardName, scroll, search, getBoardByScrollSuccess, getBoardByScrollFailure));\n        }, 750);\n    }\n}\n\nexport function getBoardByScroll() {\n    return {\n        type: BOARD_SCROLL_GET\n    }\n}\n\nexport function getBoardByScrollSuccess(search = '', postlist) {\n    return {\n        type: BOARD_SCROLL_GET_SUCCESS,\n        search,\n        postlist\n    }\n}\n\nexport function getBoardByScrollFailure(err) {\n    return {\n        type: BOARD_SCROLL_GET_FAILURE,\n        err\n    }\n}\n\n","//\n\n// 상위 컴포넌트: pages/Board\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport Board from \"../components/Board\";\nimport SearchIcon from \"../components/Structure/SearchIcon\";\n\n// 액션\nimport {\n    headerOn,\n    headerOff,\n    searchBarOn,\n} from \"../store/actions/structure\"\n\nimport { \n    initiateBoard,\n    getBoardRequest,\n    getBoardRequestByScroll\n} from '../store/actions/board'\n\nimport { topicSelect } from \"../store/actions/topic\";\n\nclass BoardContainer extends Component {    \n\n\n    async componentDidMount() {\n\n        await this._initBoard()                                   // Board 초기화 및 scroll 0 데이터 GET 요청\n        const { boardName, scroll } = this.props;\n\n        this.props.headerOn();                              // 헤더 On\n        this.props.searchBarOn();                           // 검색창 On\n        this.props.topicSelect(boardName);                  // app의 topic state를 boardName으로 설정\n\n        this.props.getBoardRequest(boardName, scroll);\n\n        window.addEventListener('scroll', this._handleScroll);   // Scroll 이벤트가 생길 때, onScroll을 실행함\n    }\n\n    async componentWillUnmount () {\n        window.removeEventListener(\"scroll\", this._handleScroll);\n    }\n\n    _initBoard = async () => {\n        await this.props.initiateBoard();               // Board 초기화\n    }\n\n    _handleScroll = (e) => {\n        let { isHeaderOn, boardName, scroll, search } = this.props;\n\n        let scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);\n        let scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n        let clientHeight = document.documentElement.clientHeight;\n\n        // Header On/Off 관련\n        if (isHeaderOn) {\n            if(scrollTop > 64){\n                this.props.headerOff();\n            }\n        }\n        else if (scrollTop <= 64) {\n            this.props.headerOn();\n        }\n\n        // 무한 스크롤\n        if (scrollTop + clientHeight > scrollHeight - 64) {\n            if( !this.props.isLoading ){\n                this.props.getBoardRequestByScroll( boardName, scroll, search );\n            }\n        }\n    }\n\n\n    render() {\n        let {\n            // properties\n            boardName,\n            postlist,\n            search,\n            isHeaderOn,\n            isGetSuccess,\n\n            // methods\n            headerOn,\n        } = this.props;\n\n        return (\n            <div>\n                {\n                    isGetSuccess ?\n                \n                    <Board\n                        boardName={boardName} \n                        postlist={postlist} \n                        search={search}\n                    /> :\n                    <div className='PageError'>\n                        새로고침을 눌러주세요 :)\n                    </div>\n                }              \n                <SearchIcon\n                    isHeaderOn={isHeaderOn}\n                    headerOn={headerOn}\n                />  \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isGetSuccess: state.board.isGetSuccess,     // GET 요청이 성공했는 지 여부\n        postlist: state.board.postlist,             // postlist 데이터\n        scroll: state.board.scroll,                 // 스크롤 횟수 (데이터를 받은 횟수)\n        search: state.board.search,                 // 검색어 데이터\n        isLoading: state.board.isLoading,           // Scroll GET 대기 여부\n        isHeaderOn: state.structure.isHeaderOn,     // 헤더가 On 인지\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn: () => {dispatch(headerOn())},                     // 헤더를 나타나게 하는 메서드\n        headerOff: () => {dispatch(headerOff())},                   // 헤더를 사라지게 하는 메서드\n        searchBarOn: () => {dispatch(searchBarOn())},               // 검색바를 나타나게 하는 메서드\n\n        initiateBoard: () => {dispatch(initiateBoard())},           // 보드 초기화 메서드 \n        getBoardRequest: (boardName, scroll, search) => {           // 보드 GET 요청 메서드\n            dispatch(getBoardRequest(boardName, scroll, search))\n        },\n        getBoardRequestByScroll: (boardName, scroll, search) => {   // 보드 Scroll GET 요청 메서드\n            dispatch(getBoardRequestByScroll(boardName, scroll, search))\n        },\n\n        topicSelect: (topic) => {dispatch(topicSelect(topic))},     // App의 topic state를 topic 값으로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BoardContainer);","import React, { Component } from 'react';\n\nclass MarketDetailContainer extends Component {\n\n    render() {\n\n        return (\n            <div>\n                Market Detail id: {this.props.match.params.id}\n            </div>\n        )\n    }\n}\n\nexport default MarketDetailContainer;","// '/board' url이 들어올 때, 처리하는 page 파일\n// '/board' url은 market과 networking 게시판으로 이어진다.\n\n// 상위 컴포넌트: App.js\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport BoardContainer from \"../containers/BoardContainer\";\nimport MarketDetailContainer from '../containers/MarketDetailContainer';\n\nconst Board = () => {\n\n    return (\n        <div>\n            <Route exact path='/board/market' render={ () => \n                <BoardContainer boardName='market' />\n            } />\n            <Route path='/board/market/:id' component={MarketDetailContainer} />\n\n            <Route exact path='/board/networking' render={ () => \n                <BoardContainer boardName='networking' />\n            } />\n            <Route path='/board/networking/:id' component={MarketDetailContainer} />\n        </div>\n    )\n}\n\nexport default Board;","\n\n// 상위 컴포넌트: CarpoolContainer\n\nimport React, { Component } from \"react\";\n\nimport \"./Carpool.css\";\n\nclass Carpool extends Component {\n\n    render() {\n        return (\n            <div className=\"CarpoolTemplate\">\n                \n            </div>\n        )\n    }\n}\n\n\nexport default Carpool;","\n\n// 상위 컴포넌트: pages/Carpool\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n\nimport Carpool from \"../components/Carpool\";\n\nimport { \n    headerOn,\n    searchBarOff,\n    categoryOff\n} from \"../store/actions/structure\";\n\nimport { topicCarpool } from \"../store/actions/topic\";\n\n\nclass CarpoolContainer extends Component {    \n\n    componentDidMount() {\n        this.props.headerOn();\n        this.props.searchBarOff();\n        this.props.categoryOff();\n        this.props.topicCarpool();\n    }\n\n    render() {\n        return (\n            <div>\n                <Carpool />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        headerOn : () => {dispatch(headerOn())},\n        searchBarOff : () => {dispatch(searchBarOff())},\n        categoryOff : () => {dispatch(categoryOff())},\n\n        topicCarpool : () => {dispatch(topicCarpool())},    // App의 topic state를 CARPOOL로 설정\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarpoolContainer);","import React from 'react';\nimport CarpoolContainer from \"../containers/CarpoolContainer\";\n\nconst Carpool = () => {\n    return (\n        <CarpoolContainer/>\n    )\n}\n\nexport default Carpool;","\n\n// 상위 컴포넌트: SideBar\n\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport './Menu.css';\n\nconst Menu = ({selectedTopic, topicData}) => {\n    \n    return (\n        <ul className=\"Menu\">\n            {topicData.map((data, i) => {\n                return(\n                    <MenuItem\n                        title={data.title}\n                        url={data.url}\n                        isActive={data.key === selectedTopic}\n                        key={i}\n                    />\n                )\n            })}\n        </ul>\n    )\n}\n\nMenu.propTypes = {\n    selectedTopic: PropTypes.string,        // 하이라이트를 줄 topic의 키 값\n    topicData: PropTypes.array.isRequired   // 메뉴 아이템의 데이터 리스트\n}\n\nMenu.defaultProps = {\n    selectedTopic: \"HOME\"\n}\n\nconst MenuItem = ({title, url, isActive}) => {\n    return (\n        <li className={isActive ? 'CategoryItem Active' : 'CategoryItem'}>\n            <Link to={url} className='CategoryText'>{title}</Link>\n        </li>\n    )\n}\n\n\nexport default Menu;","//\n\n// 상위 컴포넌트: SideBarContainer.js\n\n\nimport React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport topicData from \"./topics.json\";\n\nimport Menu from \"./Menu\";\nimport logo from \"./logo-color.png\";\n\nimport './SideBar.css';\n\n\nclass SideBar extends Component {\n\n    render() {\n        return (\n            <aside className='SideBar'>\n\n                <div className=\"LogoContainer\">\n                    <Link to='/'><img src={logo} className=\"logo-Image\" alt=\"Home\" /></Link>\n                </div>\n\n                <div className=\"UpperItemContainer\">\n                    <Menu \n                        selectedTopic={this.props.topic} \n                        topicData={topicData.upper}    \n                    />\n                </div>\n\n                <div className='BottomItemContainer'>\n                    <Menu\n                        selectedTopic={this.props.topic} \n                        topicData={topicData.below}\n                    />\n                </div>\n                \n            </aside>\n        )\n    }\n}\n\nSideBar.propTypes = {\n    topic: PropTypes.string.isRequired      // 하이라이트를 줄 topic의 인덱스\n}\n\n\nexport default SideBar;","// SideBar와 관련된 액션을 담은 컨테이너 컴포넌트\n\n// 상위 컴포넌트: App\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n// 컴포넌트\nimport SideBar from \"../components/Structure/SideBar\";\n\n// 액션\n\n\nclass SideBarContainer extends Component {    \n    \n    render() {\n        return (\n            <SideBar topic={this.props.topic}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        topic: state.topic.topic\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBarContainer);","import React, { Component } from \"react\";\n\nimport './SearchBar.css';\n\nclass SearchBar extends Component {\n\n    state = {\n        keyword: ''\n    }\n    \n    _handleClick = () => {\n        console.log(this.state.keyword)\n    }\n\n    _handleInput = (e) => {\n        this.setState({\n            keyword: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Search-Bar\">\n                <input type='text' onChange={this._handleInput} className=\"Search-TextArea\" />\n                <div onClick={this._handleClick} className=\"SearchBotton\">검색</div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","// 상단 바 (Header) 컴포넌트\n// 로고, 게시판 title, 검색 바(다판다, 잉력시장), 유저 상태(log), 알람표시, 카테고리(잉력시장)\n\n// 상위 컴포넌트: HeaderContainer\n\nimport React, {Component} from 'react'\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport SearchBar from \"./SearchBar\";\nimport './Header.css'\nimport logo from './logo-white.png';\n\nclass Header extends Component {\n\n    render() {\n\n        return (\n            <div className={\n                this.props.isHeaderOn ?\n                \"Header\" :\n                \"Header hidden\"\n            }>\n                <div className=\"LogoContainer\">\n                    <Link to=\"/\"><img src={logo} className=\"logo-Image\" alt=\"Home\" /></Link>\n                </div>\n\n                <div className=\"EmptyContainer\"></div>\n                \n                <div className=\"SearchBarContainer\">\n                    {\n                        this.props.isSearchBarOn ?\n                        <SearchBar/> :\n                        ''\n                    }\n                </div>\n\n                <div className=\"EmptyContainer\"></div>\n\n                {\n                    this.props.isLoggedIn ? \n                    <a onClick={this.props.handleLogout} href='/' className='LogItem'>Logout</a> : \n                    <Link to='/auth/login' className='LogItem'>Login</Link>\n                }\n                {\n                    this.props.isCategoryOn ?\n                    <div></div> :\n                    \"\"\n                }\n            </div>\n        )\n    }\n}\n\nHeader.propTypes = {\n    // Properties\n    isHeaderOn: PropTypes.bool.isRequired,      // Header가 나타나는 지,\n    isSearchBarOn: PropTypes.bool.isRequired,   // 검색바를 나타낼지,\n    isCategoryOn: PropTypes.bool.isRequired,    // 카테고리 창을 나타낼지,\n    isLoggedIn: PropTypes.bool.isRequired,      // 로그인 되어있는지,\n    user: PropTypes.object,                     // 유저 객체\n\n    // Methods\n    handleLogout: PropTypes.func.isRequired // 로그아웃 메서드\n}\n\nHeader.defaultProps = {\n    user: {}\n}\n\nexport default Header;","// 헤더와 헤더와 관련된 상태를 담은 컴포넌트\n// isHeaderOn, isSearchBarOn, isCategoryOn, isLoggedIn, whichBoard\n// getStatus => ( 한 군데서 처리해도 되지 않을까 ? ), handleLogout \n\n// 상위 컴포넌트: App\n\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\nimport { \n    getStatusRequest,\n    logoutRequest \n} from \"../store/actions/auth\";\nimport Header from \"../components/Structure/Header\";\n\nclass HeaderContainer extends Component {    \n    \n    componentDidMount() {\n        this.props.getStatusRequest();\n    }\n    \n    render() {\n        return (\n            <Header \n                isHeaderOn={this.props.isHeaderOn}\n                isSearchBarOn={this.props.isSearchBarOn}\n                isCategoryOn={this.props.isCategoryOn}\n                isLoggedIn={this.props.isLoggedIn}\n                user={this.props.userInfo}\n                \n                handleLogout={this.props.logoutRequest}\n                getStatus={this.props.getStatusRequest}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isHeaderOn: state.structure.isHeaderOn,         // Header가 나타나는 지,\n        isSearchBarOn: state.structure.isSearchBarOn,   // 검색바를 나타낼지,\n        isCategoryOn: state.structure.isCategoryOn,     // 카테고리 창을 나타낼지,\n        isLoggedIn: state.auth.isLoggedIn,              // 로그인 되어있는지,\n        userInfo: state.auth.userInfo,                  // 유저 정보 객체\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {dispatch(getStatusRequest())},\n        logoutRequest: () => {dispatch(logoutRequest())}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","// 실질적으로 보여지는 부분이 담긴 최상위 컴포넌트\n// 페이지 절대 구성 요소인 Header와 SideBar를 먼저 구성하고, Main Template 내에 url에 따라 페이지 렌더\n\n// 상위 컴포넌트: Root\n\nimport React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\n// 컴포넌트\nimport { \n    Home, \n    NotFound, \n    Auth,\n    Board,\n    Carpool,\n} from \"../pages\";\nimport SideBarContainer from \"../containers/SideBarContainer\";\nimport HeaderContainer from '../containers/HeaderContainer';\n\nimport './App.css';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div>\n                <HeaderContainer />\n                <div className=\"MainTemplate\">\n                    <SideBarContainer />\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route path='/auth/:kind' component={Auth}/>\n                        <Route path='/board' component={Board} />\n                        <Route path='/carpool' component={Carpool} />\n                        <Route component={NotFound}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;","import { \n    AUTH_GET_STATUS_SUCCESS,\n    AUTH_GET_STATUS_FAILURE,\n    AUTH_REGISTER_SUCCESS,\n    AUTH_REGISTER_FAILURE,\n    AUTH_LOGIN_SUCCESS,\n    AUTH_LOGIN_FAILURE,\n    AUTH_LOGOUT\n} from \"../actions/ActionTypes\";\n\nconst initialState = {\n    isLoggedIn: false,\n    userInfo: {\n        id: null,\n        username: \"\"\n    },\n\n    // 로그인 성공 여부\n    loginSuccess: true,\n\n    // 회원가입 성공 여부\n    registerSuccess: false,\n    registerError: \"\"\n}\n\nexport default function auth (state = initialState, action) {\n\n    switch (action.type) {\n        \n        // 유저 정보 확인 액션\n        case AUTH_GET_STATUS_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn: true,\n                userInfo: {\n                    id: action.userInfo.id,\n                    username: action.userInfo.username\n                }\n            };\n\n        case AUTH_GET_STATUS_FAILURE:\n            return {\n                ...state,\n                isLoggedIn: false,\n                userInfo: {\n                    id: null,\n                    username: \"\"\n                }\n            };\n\n        // 회원가입 액션\n        case AUTH_REGISTER_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn: true,\n                registerSuccess: true\n            }\n\n        case AUTH_REGISTER_FAILURE:\n            return{\n                ...state,\n                isLoggedIn: false,\n                registerSuccess: false\n            }\n\n        // 로그인 액션\n        case AUTH_LOGIN_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn: true,\n                userInfo: {\n                    id: action.userInfo.id,\n                    username: action.userInfo.username\n                },\n                loginSuccess: true,\n            }\n\n        case AUTH_LOGIN_FAILURE:\n            return{\n                ...state,\n                loginSuccess: false\n            }\n\n        // 로그아웃 액션\n        case AUTH_LOGOUT:\n            return {\n                ...state,\n                isLoggedIn: false,\n                userInfo: {\n                    id: null,\n                    username: \"\"\n                }\n            };\n    \n        default:\n            return state;\n    }\n}","import {\n    BOARD_INIT,\n    BOARD_GET_SUCCESS,\n    BOARD_GET_FAILURE,\n    BOARD_SCROLL_GET,\n    BOARD_SCROLL_GET_SUCCESS,\n    BOARD_SCROLL_GET_FAILURE\n} from \"../actions/ActionTypes\";\n\n\nconst InitialState = {\n    isGetSuccess: false,    // GET 요청이 성공했는 지 여부\n    postlist: [],           // postlist 데이터\n    scroll: 0,              // 스크롤 횟수 (데이터를 받은 횟수)\n    search: '',             // 검색어 데이터\n\n    isLoading: false,       // Scroll GET 대기 여부\n\n    err: '',                // 에러\n}\n\nexport default function market (state = InitialState, action) {\n\n    switch (action.type) {\n        \n        // 보드 초기화 액션\n        case BOARD_INIT:\n            return {\n                ...InitialState,\n            };\n\n        // 보드 GET 액션\n        case BOARD_GET_SUCCESS:\n            return {\n                ...state,\n                isGetSuccess: true,\n                postlist: [...state.postlist, ...action.postlist],\n                scroll: state.scroll + 1,\n                search: action.search,\n            }\n\n        case BOARD_GET_FAILURE:\n            return {\n                ...state,\n                isGetSuccess: false,\n                err: action.err\n            }\n\n        case BOARD_SCROLL_GET:\n            return {\n                ...state,\n                isLoading: true\n            }\n\n        case BOARD_SCROLL_GET_SUCCESS:\n            return {\n                ...state,\n                isLoading: false,\n                postlist: [...state.postlist, ...action.postlist],\n                scroll: state.scroll + 1,\n                search: action.search,\n            }\n\n        case BOARD_SCROLL_GET_FAILURE:\n            return {\n                ...state,\n                isGetSuccess: false,\n                err: action.err\n            }\n\n        default:\n            return state\n    }\n}","import { \n    STRUCTURE_SEARCH_BAR_ON,\n    STRUCTURE_SEARCH_BAR_OFF,\n    STRUCTURE_HEADER_ON,\n    STRUCTURE_HEADER_OFF,\n    STRUCTURE_CATEGORY_ON,\n    STRUCTURE_CATEGORY_OFF\n } from \"../actions/ActionTypes\";\n\n\nconst InitialState = {\n    isSearchBarOn: false,\n    isHeaderOn: true,\n    isCategoryOn: false,\n}\n\nexport default function structure (state = InitialState, action) {\n\n    switch (action.type) {\n        // 헤더의 검색 창\n        case STRUCTURE_SEARCH_BAR_ON:\n            return {\n                ...state,\n                isSearchBarOn: true\n            }\n\n        case STRUCTURE_SEARCH_BAR_OFF:\n            return {\n                ...state,\n                isSearchBarOn: false\n            }\n\n        // 헤더\n        case STRUCTURE_HEADER_ON:\n            return {\n                ...state,\n                isHeaderOn: true\n            }\n    \n        case STRUCTURE_HEADER_OFF:\n            return {\n                ...state,\n                isHeaderOn: false\n            }\n            \n        // 헤더의 카테고리 옵션\n        case STRUCTURE_CATEGORY_ON:\n            return {\n                ...state,\n                isCategoryOn: true\n            }\n    \n        case STRUCTURE_CATEGORY_OFF:\n            return {\n                ...state,\n                isCategoryOn: false\n            }\n            \n    \n        default:\n            return state;\n    }\n}","import { \n    TOPIC_HOME,\n    TOPIC_MARKET,\n    TOPIC_CARPOOL,\n    TOPIC_NETWORK\n} from \"../actions/ActionTypes\";\n\nimport { \n    HOME,\n    MARKET,\n    CARPOOL,\n    NETWORK\n} from \"../actions/topic\";\n\n\nconst InitialState = {\n    topic: HOME\n}\n\nexport default function topic(state = InitialState, action) {\n\n    switch (action.type) {\n        case TOPIC_HOME:\n            return {\n                ...state,\n                topic: HOME\n            }\n\n        case TOPIC_MARKET:\n            return {\n                ...state,\n                topic: MARKET\n            }\n\n        case TOPIC_CARPOOL:\n            return {\n                ...state,\n                topic: CARPOOL\n            }\n\n        case TOPIC_NETWORK:\n            return {\n                ...state,\n                topic: NETWORK\n            }\n    \n        default:\n            return state\n    }\n\n\n\n}","import { combineReducers } from \"redux\";\n\nimport auth from \"./auth\";\nimport board from \"./board\";\nimport structure from \"./structure\";\nimport topic from './topic';\n\nconst reducers = combineReducers({\n    auth, board, structure, topic \n})\n\nexport default reducers;","import React from \"react\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducer from './store/reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst Root = () => {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    )\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './Root';\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}